<?php

namespace backend\controllers;

use backend\models\AdminMember;
use Yii;
use backend\models\AdminCharge;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\data\Pagination;
use common\helps;
use common\helps\ExportExcelController;
use backend\models\AdminUserRole;
use backend\models\AdminUser;

/**
 * AdminChargeController implements the CRUD actions for AdminCharge model.
 */
class AdminChargeController extends Controller
{
    /**
     * @inheritdoc
     */
    public $layout = "lte_main";
    public $admin_id;
    public $role_id;
    public $admin_user;
    public $code = [];
    public $pay_type = ['1'=>'支付宝','2'=>'盛付通支付','3'=>'环迅支付',];
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->admin_id = yii::$app->session['__id'];
        //根据管理员id判断管理员的角色，超级管理员role_id为1
        $this->role_id = AdminUserRole::findOne(['user_id'=>yii::$app->session['__id']])->role_id;
        $this->admin_user = AdminUser::findOne(['id'=>yii::$app->session['__id']]);
        $this->order();
    }

    /**
     * Lists all AdminCharge models.
     * @return mixed
     */
    public function actionIndex()
    {
        if( !in_array($this->role_id, [1,2,5,6]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $state = [0=>'未支付',1=>'支付成功',2=>'支付失败'];
        $query = AdminCharge::find()->joinWith('member');
        $static = AdminCharge::find()->joinWith('member');

        $search = Yii::$app->request->get('query');
        $query = $this->condition($query,$search);
        $static = $this->condition($static,$search);
        //如果是代理商，只能看到自己推荐的会员列表
        if($this->role_id == 2) {
            $this->code = [];
            //下级代理的会员也要显示
            $admin_user = AdminUser::find()->where(['in','vatation_code2',$this->admin_user->vatation_code])->all();
            if($admin_user){
                $this->getAgentMember($admin_user);
            }
            $this->code[] = $this->admin_user->vatation_code;
            $query = $query->andWhere(['in','admin_member.vatation_code2',$this->code]);
            //自己的邀请码
            //$vatation_code = $this->admin_user->vatation_code;
            //$query = $query->andWhere(['admin_member.vatation_code2'=>$vatation_code]);
        }
        $sum = $static->select('sum(admin_charge.money) as money,sum(admin_charge.fee_money) as fee_money')->Asarray()->one();
        // var_dump($sum);
        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $products = $query->offset($pagination->offset)->orderBy('dates DESC')
            ->limit($pagination->limit)
            ->all();
        return $this->render('index', [
            'model' => $products,
            'pages' => $pagination,
            'query' => $search,
            'state' => $state,
            'sum' => $sum,
            'role_id' => $this->role_id,
            'pay_type' => $this->pay_type,
        ]);
    }

    /**
     * Displays a single AdminCharge model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        if( !in_array($this->role_id, [1,2,5,6]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $state = [0=>'未支付',1=>'支付成功',2=>'支付失败'];
        $model = $this->findModel($id);
        //如果是代理商并且该会员不是此管理员的
        if( ($this->role_id == 2) && (AdminMember::findOne(['id'=>$model->users_id])->vatation_code2 != $this->admin_user->vatation_code)) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $xgj_name = AdminMember::findOne(['id'=>$model->users_id])->xgj_name;
        $model->users_id = AdminMember::findOne(['id'=>$model->users_id])->usersname;
        return $this->render('view', [
            'model' => $model,
            'state' => $state,
            'xgj_name' => $xgj_name,
            'pay_type' => $this->pay_type,
        ]);

    }

    /**
     * Creates a new AdminCharge model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        if( !in_array($this->role_id, [1,6]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $model = new AdminCharge();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing AdminCharge model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        if( !in_array($this->role_id, [1,6]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $model = $this->findModel($id);
        //如果是代理商并且该会员不是此管理员的
        /*if( ($this->role_id == 2) && (AdminMember::findOne(['id'=>$model->users_id])->vatation_code2 != $this->admin_user->vatation_code)) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }*/
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing AdminCharge model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        if( !in_array($this->role_id, [1,6]) ) {
            return 800;
        }
        //如果不是超级管理员并且该会员不是此管理员的
        /*if( ($this->role_id != 1) && (AdminMember::findOne(['id'=>$model->users_id])->vatation_code2 != $this->admin_user->vatation_code)) {
            return $this->actionIndex();
        }*/

        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    public function actionDelrecord(array $ids)
    {
        if( !in_array($this->role_id, [1,6]) ) {
            return 800;
        }
        if (count($ids) > 0) {
            $c = AdminCharge::deleteAll(['in', 'id', $ids]);
            echo json_encode(array('errno' => 0, 'data' => $c, 'msg' => json_encode($ids)));
        } else {
            echo json_encode(array('errno' => 2, 'msg' => ''));
        }
    }

    /**
     * Finds the AdminCharge model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return AdminCharge the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AdminCharge::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    /**
     * 搜索条件
     * @param $query
     * @param $search
     * @return mixed
     */
    protected function condition($query,$search)
    {
        if (count($search) > 0) {

            if (intval($search['state']) >= 0) {
                $query = $query->andWhere(['admin_charge.state' => $search['state']]);
            }
            if (intval($search['status']) >= 0) {
                $query = $query->andWhere(['admin_charge.status' => $search['status']]);
            }
            if($search['xgj_name']) {
                $query = $query->andWhere(['xgj_name'=>$search['xgj_name']]);
            }
            if($search['realname']) {
                $query = $query->andWhere(['like','realname',$search['realname']]);
            }
            if ($search['pay_ordersid']) {
                $query = $query->andWhere(['admin_charge.pay_ordersid' => $search['pay_ordersid']]);
            }
            if ($search['b_time']) {
                $b_time = strtotime($search['b_time']);
                $query = $query->andWhere(['>=', 'admin_charge.dates', $b_time]);
            }

            if ($search['e_time']) {
                $e_time = strtotime($search['e_time']);
                $query = $query->andWhere(['<=', 'admin_charge.dates', $e_time]);
            }

        }
        return $query;
    }

    public function actionExport()
    {
        if( !in_array($this->role_id, [1,6]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $arr_state = [0=>'未支付',1=>'支付成功',2=>'支付失败'];
        $excel = new ExportExcelController();
        $search = Yii::$app->request->get('query');
        // var_dump($search);exit;
        $query = AdminCharge::find()->joinWith('member');
        $model = $this->condition($query,$search)->asArray()->all();


        $data[] = ['序号','会员号','手续费','充值金额','标题','充值时间','流水号','ip','支付方式','状态','支付单号','支付状态','图片','审核状态'];
        foreach ($model as $k=> $arr) {
            $data[$k+1] = $arr;
            $data[$k+1]['dates'] = date('Y-m-d H:i:s',$arr['dates']);
            $data[$k+1]['users_id'] = $arr['member']['usersname'];
            $data[$k+1]['state'] = $arr_state[$arr['state']];

            unset($data[$k+1]['member']);
        }
        // print_r($arr['state']);exit;
        $filename = '充值记录'.date('Ymd',time());
        $excel->download($data, $filename);
        //echo "<script>history.go(-1)</script>";

    }

    /*
     * 返回代理下面代理的邀请码
     * 代理的代理。。。
     * $model
     * */
    protected function getAgentMember($model)
    {
        //获取其下面的代理
        //$admin_user = AdminUser::find()->where(['vatation_code2'=>$vatation_code])->all();
        $arr = [];
        foreach ($model as $key=> $list) {
            if($list->vatation_code) {
                //返回下面的代理的邀请码
                $this->code[] = $list->vatation_code;
                $arr[] = $list->vatation_code;
            }
        }
        $next_model = AdminUser::find()->where(['in','vatation_code2',$arr])->all();
        //如果存在下级代理
        if($next_model){
            $this->getAgentMember($next_model);
        }
        return $this->code;
    }

    /**
     * 处理未支付订单
     */
    protected function Order()
    {
        $model = AdminCharge::find()->where(['state'=>0])->all();
        if($model){
            $ids = array();
            foreach($model as $list){
                if(time()-$list->dates>86400){
                    $ids[] = $list->id;
                }
            }
            AdminCharge::deleteAll(['in','id',$ids]);
        }
    }

}
