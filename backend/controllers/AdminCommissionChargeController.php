<?php

namespace backend\controllers;

use backend\models\AdminCommission;
use backend\models\AdminTongji;
use backend\models\AdminUserPeoduct;
use Yii;
use backend\models\AdminCommissionCharge;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\data\Pagination;
use backend\models\AdminUserRole;
use backend\models\AdminUser;

/**
 * AdminCommissionChargeController implements the CRUD actions for AdminCommissionCharge model.
 */
class AdminCommissionChargeController extends Controller
{
    /**
     * @inheritdoc
     */
    public $layout = "lte_main";
    public $admin_id;
    public $role_id;
    public $admin_user;
    public $user_id = [];

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }
    public function init()
    {
        error_reporting(0);
        parent::init(); // TODO: Change the autogenerated stub
        $this->admin_id = yii::$app->session['__id'];
        //根据管理员id判断管理员的角色，超级管理员role_id为1
        $this->role_id = AdminUserRole::findOne(['user_id'=>yii::$app->session['__id']])->role_id;
        $this->admin_user = AdminUser::findOne(['id'=>yii::$app->session['__id']]);
    }

    /**
     * Lists all AdminCommissionCharge models.
     * @return mixed
     */
    public function actionIndex()
    {
        if( !in_array($this->role_id, [1,2,5,6]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $query = AdminCommissionCharge::find()->joinWith('info');
        $querys = Yii::$app->request->get('query');
        if (count($querys) > 0) {
            $state = $querys['state'];
            if($querys['name']) {
                $query = $query->andWhere(['like','uname',$querys['name']]);
            }
            if($state>=0) {
                $query = $query->andWhere(['admin_commission_charge.state'=>$state]);
            }
            if($querys['b_time']) {
                $query = $query->andWhere(['>=','create_time',$querys['b_time']]);
            }
            if($querys['e_time']) {
                $query = $query->andWhere(['<=','create_time',$querys['e_time']]);
            }
        }
        //如果是代理商，看到的是自己和自己的下级（包括下级的下级）
        if($this->role_id == 2) {
            $this->user_id = [$this->admin_id];
            $vatation_code = $this->admin_user->vatation_code;  //自己的邀请码
            $model = AdminUser::find()->where(['vatation_code2'=>$vatation_code])->all();   //下级集合
            $this->getAgentMembers($model);     //将自己下级（包括下级的下级）代理的id添加到user_id这个数组中去
            $query = $query->andWhere(['in','uid',$this->user_id]);
        }

        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $sum = $query->sum('admin_commission_charge.money');
        $products = $query->offset($pagination->offset)->orderBy('state ASC,create_time desc')
            ->limit($pagination->limit)
            ->all();
            // var_dump($products);
        return $this->render('index', [
            'model' => $products,
            'sum' => $sum,
            'pages' => $pagination,
            'role_id' => $this->role_id,
            'query' => $querys,
            'admin_id' => $this->admin_id,
        ]);
    }

    /**
     * Displays a single AdminCommissionCharge model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);

    }

    /**
     * Creates a new AdminCommissionCharge model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new AdminCommissionCharge();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing AdminCommissionCharge model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing AdminCommissionCharge model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        //如果不是超级管理员
        if( $this->role_id != 1 ) {
            return 800;
        }
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    public function actionDelrecord(array $ids)
    {
        //如果不是超级管理员
        if( $this->role_id != 1 ) {
            return 800;
        }
        if (count($ids) > 0) {
            $c = AdminCommissionCharge::deleteAll(['in', 'id', $ids]);
            echo json_encode(array('errno' => 0, 'data' => $c, 'msg' => json_encode($ids)));
        } else {
            echo json_encode(array('errno' => 2, 'msg' => ''));
        }
    }
    public function actionDelrecord2(array $ids)
    {
        //如果不是超级管理员
        if( $this->role_id != 1 ) {
            return 800;
        }
        if (count($ids) > 0) {
            $c = AdminCommission::deleteAll(['in', 'id', $ids]);
            echo json_encode(array('errno' => 0, 'data' => $c, 'msg' => json_encode($ids)));
        } else {
            echo json_encode(array('errno' => 2, 'msg' => ''));
        }
    }
    /**
     * Finds the AdminCommissionCharge model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return AdminCommissionCharge the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AdminCommissionCharge::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }


    /*
     * 审核
     * */
    public function actionChange()
    {
        $state = yii::$app->request->get('state');
        $id = yii::$app->request->get('id');
        $commission = AdminCommissionCharge::findOne($id);
        $commission->state = $state;
        $commission->update_time = time();
        if($state==1) {
            //审核通过
            if($commission->save()) {
                return 100;
            }
        }else if($state==2) {
            //不通过
            $uid = $commission->uid;
            $admin_info = AdminUserPeoduct::findOne(['uid'=>$uid]);
            //佣金返回到代理账户
            $admin_info->commission_amount += $commission->money;

            $transaction = Yii::$app->db->beginTransaction();
            if ($commission->validate() && $admin_info->validate()) {
                try {
                    $commission->save();
                    $admin_info->save();
                    //提交
                    $transaction->commit();
                    return 100;exit;
                } catch (Exception $e) {
                    //捕获错误
                    $transaction->rollback();
                    return 200;
                }
            }else{
                return 400;exit;
            }
        }
    }

    /*
     * 获得其代理及代理的代理。。
     * id集合
     * */
    protected function getAgentMembers($model)
    {
        //$model = AdminUser::find()->where(['vatation_code2'=>$vatation_code])->all();
        $arr = [];
        if($model) {
            foreach ($model as $key=> $list) {
                if($list->vatation_code) {
                    //返回下面的代理的邀请码
                    $this->user_id[] = $list->id;
                    $arr[] = $list->vatation_code;
                }
            }
        }

        $next_model = AdminUser::find()->where(['in','vatation_code2',$arr])->all();
        //如果存在下级代理
        if($next_model){
            $this->getAgentMembers($next_model);
        }
        return $this->user_id;
    }

    /**
     *打款填入流水账号和改变状态
     */
    public function actionPlayMoney()
    {
        $vatation_code = $this->admin_user->vatation_code;
        $model = AdminUser::find()->where(['vatation_code2'=>$vatation_code])->all();
        $user_id = $this->getAgentMembers($model);
        $flow_count = yii::$app->request->get('flow_count');
        $id = yii::$app->request->get('id');
        $charge = AdminCommissionCharge::findOne($id);
        if($this->role_id != 1) {
            if(!in_array($charge->uid,$user_id)) {
                //不是自己下面的代理
                return 400;
            }
        }
        if($charge->state > 0) {
            //已经确认过的
            return 200;
        }else{
            $charge->update_time = time();
            $charge->state = 1;
            $charge->flow_count = $flow_count;
            if($charge->save()) {
                return 100;
            }else{
                return 300;
            }
        }
    }

    /**
     * 返回打款方，一级代理的打款方为多空达人
     * @return string
     */
    public static function payUser($id)
    {
        $model = AdminUser::findOne($id);
        if(!$model) {
            return '多空达人';
        }else if( !$model->vatation_code2){
            return '多空达人';
        }else {
            $pre_model = AdminUser::find()->where(['vatation_code'=>$model->vatation_code2])->one();
            if($pre_model) {
                return $pre_model->uname;
            }else{
                return '多空达人';
            }
        }
    }


    /**
     * 返佣列表
     * @param string $id
     * @return string
     */
    public function actionCommissionList()
    {
        $query = AdminCommission::find();
        $querys = Yii::$app->request->get('query');
        if (count($querys) > 0) {
            $b_time = $querys['b_time'];
            $e_time = $querys['e_time'];
            if ($b_time) {
                $query = $query->andWhere(['>=', 'create_time', strtotime($b_time)]);
            }
            if ($e_time) {
                $query = $query->andWhere(['<=', 'create_time', strtotime($e_time)]);
            }
            if($querys['state']>0){
                $query = $query->andWhere(['type'=>$querys['state']]);
            }
            if($querys['name']){
                $uid = AdminUser::findOne(['uname'=>$querys['name']])->id;
                $query = $query->andWhere(['uid'=>$uid]);
            }
        }
        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $detailes = $query->offset($pagination->offset)->orderBy("id desc")
            ->limit($pagination->limit)
            ->all();
        return $this->render('commission-list', [
            'model' => $detailes,
            'pages' => $pagination,
            'uid'=>$this->admin_id,
            'query' => $querys,
            'role_id' => $this->role_id,
        ]);
    }

}
