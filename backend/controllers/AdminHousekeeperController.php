<?php

namespace backend\controllers;

use backend\models\AdminAccount;
use backend\models\AdminSetting;
use backend\models\AdminUserPeoduct;
use common\models\Excel;
use Yii;
use backend\models\AdminHousekeeper;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\data\Pagination;
use excel\PHPExcel;
use backend\controllers\AdminExcelController;
use backend\models\AdminUserRole;
use backend\models\AdminUser;

/**
 * AdminHousekeeperController implements the CRUD actions for AdminHousekeeper model.
 */
class AdminHousekeeperController extends Controller
{
    /**
     * @inheritdoc
     */
    public $layout = "lte_main";
    public $enableCsrfValidation = false;
    public $admin_id;
    public $role_id;
    public $admin_user;
    public $invitation;

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->admin_id = yii::$app->session['__id'];
        //根据管理员id判断管理员的角色，超级管理员role_id为1
        $this->role_id = AdminUserRole::findOne(['user_id'=>yii::$app->session['__id']])->role_id;
        $this->admin_user = AdminUser::findOne(['id'=>yii::$app->session['__id']]);
        $this->invitation = Yii::$app->user->identity->vatation_code;
    }
    /**
     * Lists all AdminHousekeeper models.
     * @return mixed
     */
    public function actionIndex()
    {
        if( !in_array($this->role_id, [1,6,7]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $query = AdminHousekeeper::find()->joinWith('account');
        $querys = Yii::$app->request->get('query');
        if (count($querys) > 0) {
            $xgj_name = $querys['xgj_name'];
            if($xgj_name){
                $query = $query->andWhere(['like','xgj_name',$xgj_name]);
            }
        }
        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $products = $query->offset($pagination->offset)->orderBy("xgj_id desc")
            ->limit($pagination->limit)
            ->orderBy(['states'=>SORT_ASC,'id'=>SORT_ASC])
            ->all();
        return $this->render('index', [
            'model' => $products,
            'query' => $querys,
            'pages' => $pagination,
            'role_id' => $this->role_id,
        ]);
    }

    /**
     * Displays a single AdminHousekeeper model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        if( !in_array($this->role_id, [1,6,7]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);

    }

    /**
     * Creates a new AdminHousekeeper model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        if( !in_array($this->role_id, [1,6]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $model = new AdminHousekeeper();
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['index', 'id' => $model->xgj_id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing AdminHousekeeper model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        if( !in_array($this->role_id, [1,6,7]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $accounts = AdminAccount::find()->all();
        $account = [];
        foreach ($accounts as $arr) {
            $account[$arr->id] = $arr->account;
        }
        /*$user = AdminUser::find()->joinWith(['daili'])->andWhere(['role_id'=>2])->all();
        $agent = [];
        foreach ($user as $list) {
            $agent[$list->id] = $list->uname;
        }*/
        $model = $this->findModel($id);
        //$agent = AdminUser::find()->joinWith('');
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['index']);
        } else {
            return $this->render('update', [
                'model' => $model,
                //'agent' => $agent,
                'account' => $account,
            ]);
        }

    }

    /**
     * Deletes an existing AdminHousekeeper model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        if( !in_array($this->role_id, [1,6,7]) ) {
            return 800;
        }
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    public function actionDelrecord(array $ids)
    {
        if( !in_array($this->role_id, [1,6,7]) ) {
            return 800;
        }
        if (count($ids) > 0) {
            $c = AdminHousekeeper::deleteAll(['in', 'xgj_id', $ids]);
            echo json_encode(array('errno' => 0, 'data' => $c, 'msg' => json_encode($ids)));
        } else {
            echo json_encode(array('errno' => 2, 'msg' => ''));
        }
    }

    /**
     * Finds the AdminHousekeeper model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return AdminHousekeeper the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AdminHousekeeper::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }


    public function actionImport() {
        set_time_limit(0);
        ini_set('memory_limit','256M');
        require ROOT.'/excel/PHPExcel.php';        //引入PHPExcel
        //require ROOT.'/excel/PHPExcel/IOFactory.php';        //引入PHPExcel
        $request = Yii::$app->request;
        $data = array();
        if($_POST){
            if($_FILES["file"]["error"] > 0){
                $data = array('error'=>'1','msg'=>'文件上传失败,请重新上传..','info'=>'');
            }
            $excelFile = '';    //文件名
            $filepath = "uploads/excel";
            $allowtype=array("xls");
            $arr=explode(".", $_FILES["file"]["name"]);
            $hz=strtolower($arr[count($arr)-1]);

            if(!is_dir($filepath)) {
                mkdir($filepath, 0777);
                chmod($filepath, 0777);
            }
            $randname = date("Y").date("m").date("d").date("H").date("i").date("s").rand(1000, 9999).".".$hz;
            if(is_uploaded_file($_FILES["file"]["tmp_name"])){      //将临时位置的文件移动到指定的目录上即可
                if(move_uploaded_file($_FILES["file"]["tmp_name"], $filepath.'/'.$randname)){
                    $excelFile = $filepath.'/'.$randname;       //上传成功的节奏
                    chmod($excelFile, 0777);
                }
            }
            return $excelFile;
            if(!$excelFile){
                return 0;//文件不存在
                //$data = array('error'=>'2','msg'=>'文件上传失败,请重新上传,检查文件名..','info'=>'');
            }else{      //读取Excel
                $csv = new AdminExcelController();
                $csv->startRow = 2;
                $csv->startColumn= 1;
                //$csv->keys= array('xgj_id','xgj_name','xgj_pwd','states','agentid');
                $data = $csv->readCSV($excelFile);
            }
        }
        return $this->redirect(['index']);
    }

    //ajax改变状态
    public function actionChangeStates()
    {
        if( !in_array($this->role_id, [1,6,7]) ) {
            return 800;
        }
        $states = Yii::$app->request->get('states');
        $xgj_id = Yii::$app->request->get('xgj_id');
        $states = abs($states-1);
        $model = $this->findModel($xgj_id);
        $model->states = $states;
        if($model->save()) {
            echo $states;
        }else {
            echo $states;
        }

    }

    /*
     * 下载文件
     * */
    public function actionDownloadFile($path_name='', $save_name=''){
        ob_end_clean();
        $path_name = yii::$app->request->get('file');
        $save_name = Yii::$app->request->get('name');
        $file = yii::$app->request->get('file');
        $path_name = ROOT.$file;
        $save_name=$save_name?:time();
        $hfile = fopen($path_name, "rb") or die("Can not find file: $path_name\n");
        Header("Content-type: application/octet-stream");
        Header("Content-Transfer-Encoding: binary");
        Header("Accept-Ranges: bytes");
        Header("Content-Length: ".filesize($path_name));
        Header("Content-Disposition: attachment; filename=\"$save_name\".csv");
        while (!feof($hfile)) {
            echo fread($hfile, 32768);
        }
        fclose($hfile);
    }
    /**
     * 读取excel数据
     * @return int
     */
    public function actionCmport()
    {
        $path = Yii::$app->request->get('path');
        $root = Yii::getAlias('@root');
        $data = Excel::getExcelData($root.'/'.$path);

        foreach ($data as $k=> $list) {
            $model[$k]['xgj_name']    = $list[0];
            $model[$k]['states']    = $list[1];
            $model[$k]['account_id']   = $list[2];
        }
        $num = Yii::$app->db->createCommand()->batchInsert('admin_xgj',['xgj_name','states','account_id'],$model)->execute();
        if($num) {
            return json_encode(['status'=>200]);
        }else{
            return json_encode(['status'=>500]);
        }
    }


}
