<?php



namespace backend\controllers;



use backend\models\AdminProduct;

use backend\models\AdminSetting;

use backend\models\AdminTongji;

use backend\models\AdminUser;

use backend\models\AdminUserRole;

use Yii;

use backend\models\AdminMember;

use yii\data\ActiveDataProvider;

use yii\web\Controller;

use yii\web\NotFoundHttpException;

use yii\filters\VerbFilter;

use yii\data\Pagination;

use backend\models\AdminRegions;

use common\helps\Tools;

use backend\models\AdminHousekeeper;

use backend\models\AdminUserpeoduct;



/**

 * AdminMemberController implements the CRUD actions for AdminMember model.

 */

class AdminMemberController extends Controller

{

    /**

     * @inheritdoc

     */

    public $state = [0 => '未认证', 1 => '禁用', 2 => '申请认证', 3 => '已认证'];

    public $layout = "lte_main";

    public $admin_id;

    public $role_id;

    public $admin_user;

    public $invitation;

    public $enableCsrfValidation = false ;

    public $level = 0;//分销等级

    public $code = [];



    public function behaviors()

    {

        return [

            'verbs' => [

                'class' => VerbFilter::className(),

                'actions' => [

                    'delete' => ['POST'],

                ],

            ],

        ];

    }



    public function init()

    {

        parent::init(); // TODO: Change the autogenerated stub

        $this->admin_id = yii::$app->session['__id'];

        //根据管理员id判断管理员的角色，超级管理员role_id为1

        $this->role_id = AdminUserRole::findOne(['user_id'=>yii::$app->session['__id']])->role_id;

        $this->admin_user = AdminUser::findOne(['id'=>yii::$app->session['__id']]);

        $this->invitation = Yii::$app->user->identity->vatation_code;

    }



    /**

     * Lists all AdminMember models.

     * @return mixed

     */

    public function actionIndex()

    {

        error_reporting(0);

        $this->code = [];

        //获取当前登录着的邀请码

        $query = AdminMember::find();

        if($this->role_id==2){

           //下级代理的会员也要显示

            $admin_user = AdminUser::find()->where(['in','vatation_code2',$this->invitation])->all();

            if($admin_user){

                $this->getAgentMember($admin_user);

            }

            $this->code[] = $this->invitation;

            $query = AdminMember::find()->where(['in','vatation_code2',$this->code]);

        }



        $querys = Yii::$app->request->get('query');

        if (count($querys) > 0) {

            $realname = $querys['realname'];

            $tel = $querys['tel'];

            $xgj_name = $querys['xgj_name'];

            if ($realname) {

                $query = $query->andWhere(['like', 'realname', $realname]);

            }

            if ($tel) {

                $query = $query->andWhere(['like', 'tel', $tel]);

            }

            if ($xgj_name) {

                $query = $query->andWhere(['like', 'xgj_name', $xgj_name]);

            }

        }

        $ky_money = [];

        $pagination = new Pagination([

                'totalCount' => $query->count(),

                'pageSize' => '10',

                'pageParam' => 'page',

                'pageSizeParam' => 'per-page']

        );

        $count_query = $query;

        //var_dump($count_data);exit;

        //select * from test order by case when num = -1 then 1 else 0 end desc;

        $products = $query->offset($pagination->offset)->orderBy("is_top desc,update_time desc,dates desc")

            ->limit($pagination->limit)

            ->all();

        $data['num'] = $count_query->count();

        //当天时间段

        $begin_today = strtotime(date('Y-m-d',time()));

        $end_today = $begin_today+24*60*60;

        $data['today_num'] = $count_query->andWhere(['between','dates',$begin_today,$end_today])->count();

        foreach ($products as $k=> &$list) {

            if(!$list->xgj_name) {

                $list->money = 0.00;

                $ky_money[$list->xgj_name] = 0.00;

            }else {

                $list->money = PublicController::getXgjInfo($list->xgj_name)->Balance;

                //$list->money = 0;

                //$list->money = 0;

                //$ky_money[$list->xgj_name] = PublicController::getXgjInfo($list->xgj_name)->Available;

                $ky_money[$list->xgj_name] = 0;

                //$ky_money[$list->xgj_name] = 0;

            }

        }

        return $this->render('index', [

            'data' => $data,

            'model' => $products,

            'pages' => $pagination,

            'query' => $querys,

            'state' => $this->state,

            'role_id' => $this->role_id,

            'ky_money' => $ky_money,

        ]);

    }



    /*

     * 返回代理下面代理的邀请码

     * 代理的代理。。。

     * $model

     * */

    protected function getAgentMember($model)

    {

        //获取其下面的代理

        //$admin_user = AdminUser::find()->where(['vatation_code2'=>$vatation_code])->all();

        $arr = [];

        foreach ($model as $key=> $list) {

            if($list->vatation_code) {

                //返回下面的代理的邀请码

                $this->code[] = $list->vatation_code;

                $arr[] = $list->vatation_code;

            }

        }

        $next_model = AdminUser::find()->where(['in','vatation_code2',$arr])->all();

        //如果存在下级代理

        if($next_model){

            $this->getAgentMember($next_model);

        }

        return $this->code;

    }



    /**

     * Displays a single AdminMember model.

     * @param string $id

     * @return mixed

     */

    public function actionView($id)

    {

        $model = $this->findModel($id);

        $model->bank_province = $model->bank_province?AdminRegions::findOne(['id'=>$model->bank_province])->name:'';

        $model->bank_city = $model->bank_city?AdminRegions::findOne(['id'=>$model->bank_city])->name:'';

        $model->money = PublicController::getXgjInfo($model->xgj_name)->Balance;

        $ky_money = PublicController::getXgjInfo($model->xgj_name)->Available;

        $card_pic = json_decode($model->cartfiles,true);

        $vatation_code = $model->vatation_code2;

        //代理

        if( ($this->role_id == 2) && ($vatation_code != $this->invitation)) {

            yii::$app->getSession()->setFlash('error', '没有该权限');

            echo "<script>window.history.go(-1)</script>";exit;

        }



        return $this->render('view', [

            'model' => $model,

            'state' => $this->state,

            'card_pic' => $card_pic,

            'ky_money' => $ky_money,

        ]);



    }



    /**

     * Creates a new AdminMember model.

     * If creation is successful, the browser will be redirected to the 'view' page.

     * @return mixed

     */

    public function actionCreate()

    {

        //代理和风控没有添加权限

        if(in_array($this->role_id, [2,7])) {

            yii::$app->getSession()->setFlash('error', '没有该权限');

            echo "<script>window.history.go(-1)</script>";exit;

        }

        $model = new AdminMember();

        $code = $model->Random_code();

        if ($model->load((Yii::$app->request->post()))) {

            $id = $this->actionRandomgj();

            $onelist = AdminHousekeeper::find()->where(array('xgj_id' => $id))->one();

            $one = $onelist->attributes;

            $model->userspwd = Yii::$app->security->generatePasswordHash($model->userspwd);

            $model->xgj_name = $one['xgj_name'];

            $model->xgj_pwd = $one['xgj_pwd'];

            $model->vatation_code = $code;

            $cartfiles = explode(',',yii::$app->request->post('cartfiles'));

            $arr_file['zm'] = $cartfiles[0];

            $arr_file['fm'] = $cartfiles[1];

            //$arr_file['case'] = $cartfiles[2];

            $model->cartfiles = json_encode($arr_file);

            $model->bank_pic = yii::$app->request->post('bank_pic');

            if ($model->validate() == true && $model->save()) {

                AdminHousekeeper::updateAll(["states" => 1,'agentid'=>1], "xgj_id='$id'");

                return $this->redirect(['index']);

            } else {

                return $this->render('create', [

                    'model' => $model,

                    'code' => $code,

                ]);

            }

        } else {

            return $this->render('create', [

                'model' => $model,

                'code' => $code,

            ]);



        }

    }



    //获取一名管家并修改其状态

    public function actionRandomgj()

    {

        $one = AdminHousekeeper::find()->where(array('states' => 0))->one();

        if ($one) {

            return $one->xgj_id;

        } else {

            echo "请添加信管家！";

            exit();

        }

    }





    /**

     * Updates an existing AdminMember model.

     * If update is successful, the browser will be redirected to the 'view' page.

     * @param string $id

     * @return mixed

     */

    public function actionUpdate($id)

    {

        $model = $this->findModel($id);

        $xgj_name1 = $this->findModel($id)->xgj_name;

        $bank_province = $model->bank_province?AdminRegions::findOne(['id'=>$model->bank_province])->name:'';

        $bank_city = $model->bank_city?AdminRegions::findOne(['id'=>$model->bank_city])->name:'';

        $model->money = PublicController::getXgjInfo($model->xgj_name)->Balance;

        //$model->money = 0;

        $ky_money = PublicController::getXgjInfo($model->xgj_name)->Available;

        //$ky_money = 0;

        $vatation_code = $model->vatation_code2;

        $card_pic = json_decode($model->cartfiles,true);

        //代理商

        if( $this->role_id == 2 ) {

            yii::$app->getSession()->setFlash('error', '没有该权限');

            echo "<script>window.history.go(-1)</script>";exit;

        }

        if ($model->load(Yii::$app->request->post())) {

             $pass =  Yii::$app->request->post("userspwd");

            if ($pass) {

                $model->userspwd = Yii::$app->security->generatePasswordHash($pass);

            }

            $xgj_name2 = Yii::$app->request->post("xgj_name");

            //如果信管家账号有修改

            if($xgj_name1 != $xgj_name2) {

                //判断信管家账号是否存在并且可用

                $is_xhj = AdminHousekeeper::find()->andwhere(['xgj_name'=>$xgj_name2])->andWhere(['states'=>0])->one();

                if(!$is_xhj) {

                    yii::$app->getSession()->setFlash('error', '信管家账号不存在或不可用');

                    //echo "<script>alert(1)</script>";exit;

                    echo "<script>window.history.go(-1)</script>";exit;

                }else {

                    $is_xhj->states = 1;

                    $is_xhj->save();

                }

            }

            $cartfiles = explode(',',yii::$app->request->post('cartfiles'));

            $arr_file['zm'] = $cartfiles[0];

            $arr_file['fm'] = $cartfiles[1];

            //$arr_file['case'] = $cartfiles[2];

            $model->cartfiles = json_encode($arr_file);

            $model->bank_pic = yii::$app->request->post('bank_pic');

            $model->xgj_name = yii::$app->request->post('xgj_name');

            $model->xgj_pwd = yii::$app->request->post('xgj_pwd');

            if ($model->save(false)) {

                return $this->redirect(['index']);

            } else {

                return $this->render('update', [

                    'model' => $model,

                    'card_pic' => $card_pic,

                    'ky_money' => $ky_money,

                    'bank_province' => $bank_province,

                    'bank_city' => $bank_city,

                ]);

            }

        } else {

            return $this->render('update', [

                'model' => $model,

                'card_pic' => $card_pic,

                'ky_money' => $ky_money,

                'bank_province' => $bank_province,

                'bank_city' => $bank_city,

            ]);

        }

    }



    /**

     * Deletes an existing AdminMember model.

     * If deletion is successful, the browser will be redirected to the 'index' page.

     * @param string $id

     * @return mixed

     */

    public function actionDelete($id)

    {

        //代理

        if( ($this->role_id == 2) ) {

            return 800;

        }

        $this->findModel($id)->delete();



        return $this->redirect(['index']);

    }



    public function actionDelrecord(array $ids)

    {

        //代理

        if( ($this->role_id == 2) ) {

            return 800;

        }

        if (count($ids) > 0) {

            $c = AdminMember::deleteAll(['in', 'id', $ids]);

            echo json_encode(array('errno' => 0, 'data' => $c, 'msg' => json_encode($ids)));

        } else {

            echo json_encode(array('errno' => 2, 'msg' => ''));

        }

    }



    /**

     * Finds the AdminMember model based on its primary key value.

     * If the model is not found, a 404 HTTP exception will be thrown.

     * @param string $id

     * @return AdminMember the loaded model

     * @throws NotFoundHttpException if the model cannot be found

     */

    protected function findModel($id)

    {

        if (($model = AdminMember::findOne($id)) !== null) {

            return $model;

        } else {

            throw new NotFoundHttpException('The requested page does not exist.');

        }

    }



    //省市联动

    public function actionGetcity()

    {

        $provice_id = isset($_GET['provice_id']) ? $_GET['provice_id'] : 1;

        $provice = AdminRegions::find()->where(array('level' => 2, 'parent_id' => $provice_id))->all();

        $arr_provice = array();

        foreach ($provice as $val) {

            $arr_provice[$val->id] = $val->name;

        }

        //对获取到的地区数组转JSON格式

        header('Content-type: application/json');

        echo json_encode($arr_provice);

        exit();

    }



    //市区联动

    public function actionGetarea()

    {

        $city_id = isset($_GET['city_id']) ? $_GET['city_id'] : 2;

        $area = AdminRegions::find()->where(array('level' => 3, 'parent_id' => $city_id))->all();

        $arr_area = array();

        foreach ($area as $val) {

            $arr_area[$val->id] = $val->name;

        }

        //对获取到的地区数组转JSON格式

        header('Content-type: application/json');

        echo json_encode($arr_area);

        exit();

    }



    /*

     * 改变状态

     * */

    public function actionChange()

    {

        //代理

        if( ($this->role_id == 2) ) {

            return 800;

        }

        if(yii::$app->request->post()) {

            $state = yii::$app->request->post('state');

            $user_id = yii::$app->request->post('user_id');

            $member = AdminMember::findOne(['id'=>$user_id]);

            $member->is_top=0;

            $member->update_time=time();

            if($member->state!=2) {

                //已审核

                return 400;

            }

            //根据会员找其代理商

            $agent = AdminUser::findOne(['vatation_code'=>$member->vatation_code2]);

            $member->state = $state;

            if($state==3) {

                $xgj_id = $this->actionRandomgj();

                $xgj = AdminHousekeeper::find()->where(array('xgj_id' => $xgj_id))->one();

                $member->xgj_name =$xgj->xgj_name;

                $member->xgj_pwd =$xgj->xgj_pwd;

                if($member->save()) {

                    AdminHousekeeper::updateAll(["states" => 1,'agentid'=>$agent->id], "xgj_id='$xgj_id'");

                    return 100;

                    //return json_encode($data,true);

                } else {

                    return 200;

                }

            }

            if($member->save()) {

                return 100;

                //return json_encode($data,true);

            } else {

                return 200;

            }





        }

    }



    /*

     * 获取用户信息

     * */

    public function actionGetInfo()

    {

        $id = Yii::$app->request->post('id');

        $onelist = AdminMember::find()->where(array('id' => "$id"))->asArray()->one();

        return json_encode($onelist);

    }



    /*

    * $url 链接地址

    * $size 二维码大小

    * $margin 外边距

    * 生成二维码

    * */

    public function actionQrcode($url='',$size=4, $margin=1)

    {

        //$url = $url?:Yii::$app->urlManager->createAbsoluteUrl(['user/register','vatation_code'=>$this->admin_user->vatation_code]);

        $url = "http://www.zgduokong.com/index.php?r=user%2Fregister&vatation_code=".$this->admin_user->vatation_code;

        //引入二维码生成类

        require ROOT.'/phpqrcode/qrlib.php';

        //设置 header 头,直接输出图片

        Yii::$app->response->headers->set('Content-Type', 'image/png');

        //根据参数生成二维码 , 将其第二个参数值设为 false ,也就是不输出图片文件

        \QRcode::png($url, false, "L", $size, $margin);

        die();

    }



    public function actionDownloadImage()

    {

        $file = yii::$app->request->get('file');



        $wrstr=htmlspecialchars_decode(file_get_contents($file));

        $outfile=time().'.'.'jpg';

        header('Content-type: application/octet-stream; charset=utf8');

        Header("Accept-Ranges: bytes");

        header('Content-Disposition: attachment; filename='.$outfile);

        echo $wrstr;

        exit();

    }



    /*

     * 交易明细

     * */

    public function actionDetail($xgj_name)

    {

        //获取当前登录着的邀请码

        if($this->role_id==2){

            //$query = AdminTongji::find()->andWhere(['xgj_id'=>$xgj_name]);

        }

        $query = AdminTongji::find()->andWhere(['xgj_id'=>$xgj_name]);

        $querys = Yii::$app->request->get('query');

        if (count($querys) > 0) {

            //开始时间：05:59

            //结算时间：06:00

            $b_time = $querys['b_time'];

            $e_time = $querys['e_time'];

            if ($b_time) {

                $query = $query->andWhere(['>=', 'jy_time', $b_time]);

            }

            if ($e_time) {

                $query = $query->andWhere(['<=', 'jy_time', $e_time]);

            }

        }

            $pagination = new Pagination([

                    'totalCount' => $query->count(),

                    'pageSize' => '10',

                    'pageParam' => 'page',

                    'pageSizeParam' => 'per-page']

            );

            $detailes = $query->offset($pagination->offset)->orderBy("jy_time desc")

                ->limit($pagination->limit)

                ->all();

            return $this->render('detail', [

                'model' => $detailes,

                'pages' => $pagination,

                'query' => $querys,

                'role_id' => $this->role_id,

                'xgj_name' => $xgj_name,

            ]);



    }



    /*

     * 导入数据时，异步更新会员盈亏

     * 导入数据时，异步计算代理商的返佣金额

     * */

    public function actionUpdateProfit()

    {

        //每次导入数据的时候，将所有代理的提交返佣状态改成0

        AdminUserpeoduct::updateAll(['state'=>0]);

        $data = yii::$app->request->post('data');

        $aaaa = 0;

        foreach ($data as $key=> $list) {

            //计算会员的盈亏

            if($list) {

                $aaaa++;

                $file= "count.txt";

                file_put_contents($file, $aaaa);

                //计算会员的盈亏

                $this->dealMemberProfit($list);

                //计算所得的佣金

                $this->dealAgentCharge($list);

                //计算直系会员给代理产生的佣金

                $this->dealMemberCharge($list);

            }else{

                return 100;

            }

        }

        return 100;

    }



    /*

     * 处理代理的手续费

     * */

    protected function dealAgentCharge($list)

    {

        $member = AdminMember::find()->where(['xgj_name'=>$list['xgj_name']])->one();

        $model = AdminUser::find()->joinWith('info')->joinWith('daili')->andWhere(['vatation_code'=>$member->vatation_code2])->andWhere('admin_user_role.role_id <> 1')->one();

        //如果上级代理不是平台

        if($model) {

            //产品手续费,单位就是该产品的单位，如交易为欧元，返回的也是欧元

            $charge = $this->getAgentCharge($model,$list['contract']);

            $this->level = 0;

            $this->commission($model,$list,$charge,floatval($list['charge']));

        }

    }



    /*

     * 计算三级代理返佣,入库

     * $model $list

     * $charge 产品手续费

     * $profit 下级返佣的钱，一级代理是客户产生的，二级代理是在一级代理中设置的

     * */

    protected function commission($model,$list,$charge,$profit)

    {

        $file= "commission.txt";

        file_put_contents($file, $list['amount'].','.$this->level.','.$charge.','.$profit.PHP_EOL,FILE_APPEND);

        //该代理得到的佣金为

        $user_info = AdminUserpeoduct::findOne(['uid'=>$model->id]);

        //$money = floatval($profit)-$charge;

        if($this->level==0) {

            $money = floatval($profit)-$charge*(intval($list['amount']));

        }else{

            /*可能出现问题*/

            //$money = (floatval($profit)-$charge)*2;

            $money = (floatval($profit)-$charge)*intval($list['amount']);

        }

        //汇率

        $rate = json_decode($model->info['rate'],true);

        $user_info->commission_amount += ($this->formatAgentMoney($list['currency'],$money,$rate));

        //截佣，如果上级代理不是一级代理

        $pre_model = AdminUser::find()->joinWith('info')->joinWith('daili')->andWhere(['vatation_code'=>$model->vatation_code2])->andWhere('admin_user_role.role_id <> 1')->one();

        if($pre_model) {

            $charge1 = $this->getAgentCharge($pre_model,$list['contract']);

            $the_charge = (floatval($charge)-floatval($charge1))*intval($list['amount']);

            $user_info->commission_agent += ($this->formatAgentMoney($list['currency'],$the_charge,$rate));

        }



        file_put_contents("money.txt", $this->formatAgentMoney($list['currency'],$money,$rate).','.$profit.PHP_EOL,FILE_APPEND);

        if($user_info->save()){

            $this->level++;

            //查询上一级代理

            $pre_model = AdminUser::find()->joinWith('info')->joinWith('daili')->andWhere(['vatation_code'=>$model->vatation_code2])->andWhere('admin_user_role.role_id <> 1')->one();

            //上级代理不是平台，并且是三级代理以内

            if($pre_model && $this->level<3) {

                $pre_charge = $this->getAgentCharge($pre_model,$list['contract']);

                $this->commission($pre_model,$list,$pre_charge,$charge);

            }

        }



    }



    /*

     * 根据返回改代理设置的产品手续费，将结果除以2返回

     * 产品代码 $contract

     * */

    protected function getAgentCharge($model,$contract)

    {

        $arr_proid = explode(',',$model->info['proid']);

        $arr_price = explode(',',$model->info['price']);

        $arr = [];

        foreach ($arr_proid as $k=> $val) {

            $arr[$val] = $arr_price[$k];

        }

        //$arr  获得的是以产品id为下表，价格为值的一维数组

        //根据合约号获取产品id

        $pro_id = AdminProduct::findOne(['code'=>$contract])->id;

        //设置的代理费用

        $charge = floatval($arr[$pro_id]);

        return (intval($charge*100))/200;

    }



    /*

     * 格式化代理的手续费返佣，单位为人民币

     * $currency 货币

     * $money 金额

     * $rate 汇率

     * */

    protected function formatAgentMoney($currency,$money,$rate)

    {

        if($currency=='USD') {

            //$rate = 1;

        } else if($currency=='EUR') {

            $money = $money*$rate['eur_usd'];

        } else if($currency=='HKD') {

            $money = $money/$rate['usd_hkd'];

        }

        $rate_usd = $rate['usd_rmb'];

        return (intval($money*$rate_usd*100))/100;

    }



    /*

     * 处理会员盈亏，美元统计

     * */

    protected function dealMemberProfit($list)

    {

        $member = AdminMember::findOne(['xgj_name'=>$list['xgj_name']]);

        if($list['currency']=='USD') {

            $money = floatval($list['pc_yingkui']);

        } else if($list['currency']=='EUR') {

            $money = floatval($list['pc_yingkui']*Tools::getSetting(23));

        } else if($list['currency']=='HKD') {

            $money = floatval($list['pc_yingkui']/Tools::getSetting(25));

        }

        $member->profit_money += number_format($money,4);

        $member->save();

    }



    /*

     * 处理直系会员给代理产生的佣金

     * */

    protected function dealMemberCharge($list)

    {

        $member = AdminMember::findOne(['xgj_name'=>$list['xgj_name']]);

        //查找上级不是管理员的代理

        //$model_user = AdminUser::findOne(['vatation_code'=>$member->vatation_code2]);

        $model = AdminUser::find()->joinWith('info')->joinWith('daili')->andWhere(['vatation_code'=>$member->vatation_code2])->andWhere('admin_user_role.role_id <> 1')->one();

        if($model) {

            $model_info = AdminUserpeoduct::findOne(['uid'=>$model->id]);

            //汇率

            $rate = json_decode($model_info->rate,true);

            //返给上级代理的佣金

            $charge = $this->getAgentCharge($model,$list['contract']);

            $money = floatval($list['charge'])-$charge*(intval($list['amount']));

            $model_info->commission_member += ($this->formatAgentMoney($list['currency'],$money,$rate));

            $model_info->save();

        }

    }



}

