<?php

namespace backend\controllers;

use backend\models\AdminMember;
use backend\models\AdminUser;
use backend\models\AdminUserpeoduct;
use backend\models\AdminUserRole;
use Yii;
use backend\models\AdminOrder;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use common\helps\ExportExcelController;
use yii\data\Pagination;

/**
 * AdminOrderController implements the CRUD actions for AdminOrder model.
 */
class AdminOrderController extends Controller
{

    public $status = [-1=>'委托卖出',0 => '申请中', 1 => '持仓中', 2 => '已结算',3=>'已撤销','4'=>'买入已报','5'=>'卖出已报'];
    public $admin_id;
    public $role_id;
    public $admin_user;
    public $cj = [];
    /**
     * @inheritdoc
     */
    public $layout = "lte_main";

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->admin_id = Yii::$app->session['__id'];
        //根据管理员id判断管理员的角色，超级管理员role_id为1
        $this->role_id = AdminUserRole::findOne(['user_id'=>$this->admin_id])->role_id;
        $this->admin_user = AdminUser::findOne(['id'=>$this->admin_id]);
    }

    /**
     * Lists all AdminOrder models.
     * @return mixed
     */
    public function actionIndex()
    {
        $query = AdminOrder::find();
        $static = AdminOrder::find();
        $search = Yii::$app->request->get('query');
        $query = $this->condition($query, $search);
        $static = $this->condition($static, $search);
        $money = $static->select('sum(order_charge)  as charge, sum(dy) as dy')->asArray()->one();
//        print_r($money);
        $num = $static->count();
        $cc = $static->where(['status' => 1])->count();
        $js = $static->where(['status' => 2])->count();
        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $products = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->orderBy(['status'=>SORT_ASC,'order_sn'=>SORT_DESC,'created_time'=>SORT_DESC])
            ->all();
        return $this->render('index', [
            'model' => $products,
            'query' => $search,
            'num' => $num,
            'cc' => $cc,
            'js' => $js,
            'money' => $money,
            'status' => $this->status,
            'pages' => $pagination,
            'role_id' => $this->role_id,
        ]);
    }


    public function actionApply()
    {
        $query = AdminOrder::find();
        $static = AdminOrder::find();
        $search = Yii::$app->request->get('query');
        // var_dump($search);
        $search['status'] = 1;

        $query = $this->condition($query, $search);
        $static = $this->condition($static, $search);
        // var_dump($query);
        $num = $static->where(['status' => 0])->count();
        $cc = $static->where(['status' => 1])->count();
        $js = $static->where(['status' => 2])->count();
        // var_dump($this->status);
        $money = $static->select('sum(order_charge)  as charge, sum(dy) as dy')->asArray()->one();

        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $products = $query->offset($pagination->offset)
            ->where(['status' => 0])
            ->limit($pagination->limit)
            ->all();
        // var_dump($products);
        return $this->render('index', [
            'model' => $products,
            'query' => $search,
            'num' => $num,
            'cc' => $cc,
            'js' => $js,
            'status' => $this->status,
            'pages' => $pagination,
        ]);
    }


    public function actionHolding()
    {
        $query = AdminOrder::find();
        $static = AdminOrder::find();
        $search = Yii::$app->request->get('query');
        // var_dump($search);
        $search['status'] = 2;

        $query = $this->condition($query, $search);
        $static = $this->condition($static, $search);
        // var_dump($query);
        $num = $static->where(['status' => 1])->count();
        $cc = $static->where(['status' => 1])->count();
        $js = $static->where(['status' => 2])->count();
        // var_dump($this->status);
        $money = $static->select('sum(order_charge)  as charge, sum(dy) as dy')->asArray()->one();

        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $products = $query->offset($pagination->offset)
            ->where(['status' => 1])
            ->limit($pagination->limit)
            ->all();
        // var_dump($products);
        return $this->render('index', [
            'model' => $products,
            'query' => $search,
            'num' => $num,
            'cc' => $cc,
            'js' => $js,
            'money' => $money,
            'status' => $this->status,
            'pages' => $pagination,
        ]);
    }


    public function actionFinish()
    {
        $query = AdminOrder::find();
        $static = AdminOrder::find();
        $search = Yii::$app->request->get('query');
        // var_dump($search);
        $search['status'] = 3;
        $query = $this->condition($query, $search);
        $static = $this->condition($static, $search);
        // var_dump($query);
        $num = $static->where(['status' => 2])->count();
        $cc = $static->where(['status' => 1])->count();
        $js = $static->where(['status' => 2])->count();
        // var_dump($this->status);
        $money = $static->select('sum(order_charge)  as charge, sum(dy) as dy')->asArray()->one();

        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $products = $query->offset($pagination->offset)
            ->where(['status' => 2])
            ->limit($pagination->limit)
            ->all();
        // var_dump($products);
        return $this->render('index', [
            'model' => $products,
            'query' => $search,
            'num' => $num,
            'cc' => $cc,
            'js' => $js,
            'money' => $money,
            'status' => $this->status,
            'pages' => $pagination,
        ]);
    }

    /**
     * Displays a single AdminOrder model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);

    }

    /**
     * Creates a new AdminOrder model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new AdminOrder();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing AdminOrder model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing AdminOrder model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    public function actionDelrecord(array $ids)
    {
        if (count($ids) > 0) {
            $c = AdminOrder::deleteAll(['in', 'id', $ids]);
            echo json_encode(array('errno' => 0, 'data' => $c, 'msg' => json_encode($ids)));
        } else {
            echo json_encode(array('errno' => 2, 'msg' => ''));
        }
    }

    /**
     * Finds the AdminOrder model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return AdminOrder the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AdminOrder::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    /**
     * 生成excel
     * $field 表头数据
     * $data 数据
     */
    public function actionExport()
    {
        // if( !in_array($this->role_id, [1,6]) ) {
        //     yii::$app->getSession()->setFlash('error', '没有该权限');
        //     echo "<script>window.history.go(-1)</script>";exit;
        // }
        $arr_status = [1 => '申请中', 2 => '持仓中', 3 => '已结算'];
        $excel = new ExportExcelController();
        $search = Yii::$app->request->get('query');
        // var_dump(Yii::$app->request->get('query'));exit;
        // $query=AdminOrder::find();
        // $querys=$this->condition($query,$search);
        // var_dump($search['status']);exit;

        $model = $this->condition(AdminOrder::find(), $search)->asArray()->all();
        // var_dump($model);exit;
        //$model = AdminCharge::find()->joinWith('member')->asArray()->all();
        $data[] = ['ID', '股票名称', '股票代码', '用户号码', '名义本金', '履约保证金', '杠杆倍率', '触发止盈', '触发止损', '手续费', '申请时间'];
        foreach ($model as $k => $arr) {

            $data[$k + 1]['id'] = $arr['id'];
            $data[$k + 1]['goods_name'] = $arr['goods_name'];
            $data[$k + 1]['goods_code'] = $arr['goods_code'];
            $data[$k + 1]['user_tel'] = $arr['user_tel'];
            $data[$k + 1]['order_my_money'] = $arr['order_my_money'];
            $data[$k + 1]['order_ly_money'] = $arr['order_ly_money'];
            $data[$k + 1]['order_bl'] = $arr['order_bl'];
            $data[$k + 1]['order_zy_money'] = $arr['order_zy_money'];
            $data[$k + 1]['order_zs_money'] = $arr['order_zs_money'];
            $data[$k + 1]['order_charge'] = $arr['order_charge'];
            $data[$k + 1]['dates'] = date('Y-m-d H:i:s', $arr['created_time']);
            $data[$k + 1]['state'] = $this->status[$arr['status'] + 1];
        }
        $filename = '策略列表' . date('Ymd', time());
        $excel->download($data, $filename);
        //echo "<script>history.go(-1)</script>";

    }

    //     * 搜索条件
    // * @param $query
    // * @param $search
    // * @return mixed
    // */
    protected function condition($query, $search)
    {
        if (count($search) > 0) {
            $user_tel = $search['user_tel'];
            $goods_name = $search['goods_name'];
            if($search['id']){
                $query = $query->andWhere(['id'=>$search['id']]);
            }
            if ($user_tel) {
                $query = $query->andWhere(['like', 'user_tel', $user_tel]);
            }
            if ($goods_name) {
                $query = $query->andWhere(['like', 'goods_name', $goods_name]);
            }
            if ($search['status'] > -2) {
                $query = $query->andWhere(['status' => $search['status']]);
            }
            if ($search['b_time']) {
                $b_time = strtotime($search['b_time']);
                $query = $query->andWhere(['>=', 'created_time', $b_time]);
            }
            if ($search['e_time']) {
                $e_time = strtotime($search['e_time']);
                $query = $query->andWhere(['<=', 'created_time', $e_time]);
            }

        }
        $id = Yii::$app->session['__id'];
        if($id!=156){
            $model = AdminUser::find()->where(['pid'=>$id])->all();
            $ids = $this->getSon($model);
            array_unshift($ids,$id);
            $mid = AdminMember::getMid($ids);
            $query = $query->andWhere(['in','user_id',$mid]);
        }
        return $query;
    }
    public function getSon($model)
    {
        $ids = array();
        if($model){
            foreach($model as $list){
                $ids[] = $list->id;
                $this->cj[] = $list->id;
            }
        }
        $next_model = AdminUser::find()->where(['in','pid',$ids])->all();
        //如果存在下级代理
        if($next_model){
            $this->getSon($next_model);
        }
        return $this->cj;
    }
    /**
     * 处理策略状态
     * @return string
     * @throws NotFoundHttpException
     */
    public function actionHandle()
    {
        $id = intval(Yii::$app->request->post('id'));
        $status = intval(Yii::$app->request->post('state'));
        $model = $this->findModel($id);
        if($model->status==$status){
            if($status==1||$status==-1){
                $model->status = '2';
                $model->end_time = time();
                if($model->save(false)){
                    return json_encode(array('state'=>300,'msg'=>'卖出成功'));
                }
            }else if($status==0){
                $model->status = '1';
                $model->begin_time = time();
                if($model->save(false)){
                    return json_encode(array('state'=>300,'msg'=>'持仓成功'));
                }
            }
        }else{
            return json_encode(array('state'=>300,'msg'=>'系统错误'));
        }
    }
}
