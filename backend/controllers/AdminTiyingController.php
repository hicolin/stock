<?php

namespace backend\controllers;

use backend\models\AdminOrder;
use Yii;
use backend\models\AdminMember;
use backend\models\AdminTiying;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\data\Pagination;
use common\helps\ExportExcelController;
use backend\models\AdminUserRole;
use backend\models\AdminUser;

/**
 * AdminTiyingController implements the CRUD actions for AdminTiying model.
 */
class AdminTiyingController extends Controller
{
    /**
     * @inheritdoc
     */
    public $layout = "lte_main";
    public $admin_id;
    public $role_id;
    public $admin_user;

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->admin_id = yii::$app->session['__id'];
        //根据管理员id判断管理员的角色，超级管理员role_id为1
        $this->role_id = AdminUserRole::findOne(['user_id'=>yii::$app->session['__id']])->role_id;
        $this->admin_user = AdminUser::findOne(['id'=>yii::$app->session['__id']]);

    }

    /**
     * Lists all AdminTiying models.
     * @return mixed
     */
    public function actionIndex()
    {
        $query = AdminTiying::find()->joinWith('member');
        $querys = Yii::$app->request->get('query');
        if (count($querys) > 0) {
            $state = $querys['state'];
            $user_id = $querys['users_id'];
            $b_time = $querys['b_time'];
            $e_time = $querys['e_time'];
            //$time = $querys['time'];
            if($state>=0) {
                $query = $query->andWhere(['admin_tiying.state'=>$state]);
            }
            if($user_id) {
                $query = $query->andWhere(['like','usersname',$user_id]);
            }
            if($b_time) {
                $query = $query->andWhere(['>=','admin_tiying.dates',$b_time]);
            }
            if($e_time) {
                $query = $query->andWhere(['<=','admin_tiying.dates',$e_time]);
            }

        }

        //如果不是超级管理员，只能看到自己推荐的会员列表
        if($this->role_id != 1) {
            //自己的邀请码
            $vatation_code = $this->admin_user->vatation_code;
            $query = $query->andWhere(['admin_member.vatation_code2'=>$vatation_code]);
        }
        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $products = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();
        return $this->render('index', [
            'model' => $products,
            'pages' => $pagination,
            'query' => $querys,
        ]);
    }

    /**
     * Displays a single AdminTiying model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        $model = $this->findModel($id);
        //如果不是超级管理员并且该会员不是此管理员的
        if( ($this->role_id != 1) && (AdminMember::findOne(['id'=>$model->users_id])->vatation_code2 != $this->admin_user->vatation_code)) {
            return $this->actionIndex();
        }
        $model->users_id = AdminMember::findOne(['id' => $model->users_id])->usersname;
        return $this->render('view', [
            'model' => $model,
        ]);

    }

    /**
     * Creates a new AdminTiying model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        //如果不是超级管理员
        if( $this->role_id != 1) {
            return $this->actionIndex();
        }
        $model = new AdminTiying();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing AdminTiying model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        //如果不是超级管理员
        if( $this->role_id != 1) {
            return $this->actionIndex();
        }
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing AdminTiying model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        //如果不是超级管理员
        if( $this->role_id != 1) {
            return $this->actionIndex();
        }
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    public function actionDelrecord(array $ids)
    {
        if (count($ids) > 0) {
            $c = AdminTiying::deleteAll(['in', 'id', $ids]);
            echo json_encode(array('errno' => 0, 'data' => $c, 'msg' => json_encode($ids)));
        } else {
            echo json_encode(array('errno' => 2, 'msg' => ''));
        }
    }

    /**
     * Finds the AdminTiying model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return AdminTiying the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AdminTiying::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
    public function actionChangeState()
    {
        $state =Yii::$app->request->get('state');
        $state = intval($state);
        $id = Yii::$app->request->get('id');
        $model = AdminTiying::findOne($id);
        $model->state = $state;
        //审核通过
        if($state==1) {
            if($model->save()) {
                return 100;
            }
        } else if($state==2){
            //审核不通过，返回钱到用户账户盈利总额中去
            $money = $model->money;
            $member = AdminMember::findOne(['id'=>$model->users_id]);
            $member->profit_money += $money;
            //返回钱到相应的账户中去
            $order = AdminOrder::findOne(['order_sn'=>$model->hsname]);
            $order->profit += $money;

            //开启事物
            $transaction = Yii::$app->db->beginTransaction();
            if ($member->validate() && $model->validate() && $order->validate()) {
                try {
                    $member->save();
                    $model->save();
                    $order->save();
                    //提交
                    $transaction->commit();
                    return 100;exit;
                } catch (Exception $e) {
                    //捕获错误
                    $transaction->rollback();
                }
            }else{
                return 400;exit;
            }



        }

    }

    /*
     * 导出数据
     * */
    public function actionExport()
    {
        $arr_state = [0=>'未审核',1=>'通过',2=>'未通过'];
        $excel = new ExportExcelController();
        $model = AdminTiying::find()->joinWith('member')->asArray()->all();
        $data[] = ['序号','会员号','金额/$','备注','时间','ip','银行','卡号','股票账户','状态'];
        foreach ($model as $k=> $arr) {
            $data[$k+1] = $arr;
            $data[$k+1]['dates'] = date('Y-m-d H:i:s',$arr['dates']);
            $data[$k+1]['users_id'] = $arr['member']['usersname'];
            $data[$k+1]['state'] = $arr_state[$arr['state']];
            unset($data[$k+1]['member']);
        }
        $filename = '线上充值记录'.date('Ymd',time());
        $excel->download($data, $filename);
        //echo "<script>history.go(-1)</script>";

    }
}
