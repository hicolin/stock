<?php

namespace backend\controllers;

use backend\models\AdminCharge;
use backend\models\AdminCommissionCharge;
use backend\models\AdminMember;
use backend\models\AdminTixian;
use Yii;
use backend\models\AdminTongji;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\data\Pagination;
use backend\models\AdminUser;
use backend\models\AdminHousekeeper;
use backend\models\AdminUserpeoduct;
use backend\models\AdminProduct;
use backend\models\AdminUserRole;
/**
 * AdminTongjiController implements the CRUD actions for AdminTongji model.
 */
class AdminTongjiController extends Controller
{
    /**
     * @inheritdoc
     */
    public $layout = "lte_main";
    public $admin_id;
    public $role_id;
    public $admin_user;

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->admin_id = yii::$app->session['__id'];
        //根据管理员id判断管理员的角色，超级管理员role_id为1
        $this->role_id = AdminUserRole::findOne(['user_id'=>yii::$app->session['__id']])->role_id;
        $this->admin_user = AdminUser::findOne(['id'=>yii::$app->session['__id']]);

    }

    /**
     * Lists all AdminTongji models.
     * @return mixed
     */
    public function actionIndex()
    {
        $query = AdminTongji::find();
        //查询符合条件的数据
        //产品字母与产品ID对应，暂时先写死，后期自行修改
        $querys = Yii::$app->request->get('query');
//        if ($querys['datetime']) {
//            $jy_time = strtotime($querys['datetime']);
//        } else {
//            $jy_time = strtotime(date('Ymd'));
//        }

        //$product = array(8=>"DAX",4=>"CL",10=>"GC",11=>"HG",7=>"HSI",9=>"CN");

        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $products = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();
        $member= AdminMember::find();
        $user = AdminUser::find();
        $money = AdminCharge::find();
        $Tx = AdminTixian::find();
        $yong = AdminCommissionCharge::find();
        if ($querys['b_time']) {
            $b_time = strtotime($querys['b_time']);
            $member = $member->andWhere(['>=', 'admin_member.dates', $b_time]);
            $money = $money->andWhere(['>=', 'admin_charge.dates', $b_time]);
            $user = $user->andWhere(['>=', 'admin_user.create_date', $b_time]);
            $yong = $yong->andWhere(['>=', 'admin_commission_charge.create_time', $b_time]);
            $Tx = $Tx->andWhere(['>=', 'admin_tixian.dates', $b_time]);
        }
        if ($querys['e_time']) {
            $e_time = strtotime($querys['e_time']);
            $member =$member->andWhere(['<=', 'admin_member.dates', $e_time]);
            $user = $user->andWhere(['<=', 'admin_user.create_date', $e_time]);
            $money = $money->andWhere(['<=', 'admin_charge.dates', $e_time]);
            $Tx = $Tx->andWhere(['<=', 'admin_tixian.dates', $e_time]);
            $yong = $yong->andWhere(['<=', 'admin_commission_charge.create_time', $e_time]);
        }
        $key =2;
        $memberNum = $member->select('id')->count();
        $daiLi = $user->select('id')->count();
        $Rmoney = $money->andwhere(['state'=>1])->select('sum(money) as money')->asArray()->one();
        //$Rmoney = $money->where(['state'=>1])->select('sum(money) as money')->asArray()->one();
        $withdraw = $Tx->andwhere(['state'=>1])->sum('money');
        $fy = $yong->andwhere(['state'=>1])->sum('money');
        return $this->render('index', [
            'model' => $products,
            'query' => $querys,
            'role_id' => $this->role_id,
            'num' => $memberNum,
            'daiLi' => $daiLi,
            'key' => $key,
            'Rmoney' => $Rmoney,
            'withdraw' => $withdraw,
            'fy' => $fy,
        ]);
    }

    /**
     * Displays a single AdminTongji model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        if( !in_array($this->role_id, [1,6,7]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        //查询符合条件的数据
       // $querys = Yii::$app->request->get('query');
        $jy_time = Yii::$app->request->get('jy_time');
        $products = AdminProduct::find()->all();
        foreach ($products as $list) {
            $product[$list->id] = $list->code;
        }
        //$product = array(8=>"DAX",4=>"CL",10=>"GC",11=>"HG",7=>"HSI",9=>"CN");

        //获取代理商下商品分成
        $user_pro = AdminUserpeoduct::find()->all();
        //print_r($user_pro);
        $pro_arr = array();
        foreach ($user_pro as $list) {
            $proids = explode(",", $list->proid);
            $price = explode(",", $list->price);
            for ($i = 0; $i < count($proids); $i++) {
                if ($product[$proids[$i]]) {
                    $pro_arr[$list->uid][$product[$proids[$i]]] = $price[$i];
                }
            }
        }

        //$sql = "select * from admin_tongji where jy_time = $jy_time and kaiping = '开'";
        //$results = AdminTongji::findBySql($sql)->all();
        //$results = AdminTongji::find()->andWhere(['jy_time' => $jy_time])->andWhere(['kaiping' => '开'])->all();
        $results = AdminTongji::find()->andWhere(['jy_time' => $jy_time])->all();
        $arr = array();
        foreach ($results as $key => $value) {
            $arr[$value['xgj_id']][] = $value;
        }
        //查询代理商
        $dl_lists = AdminUser::find()->joinwith('daili')->joinwith('account')->where('admin_user_role.role_id = 2')->asArray()->all();
        //统计所有代理商的分成手续费
        $amount = array();
        foreach ($dl_lists as $key => $list) {
            foreach ($list['account'] as $val) {
                $daili[$list['id']][] = $val['xgj_name'];
            }
            $account_ids = $daili[$list['id']];
            if ($account_ids) {
                foreach ($arr as $k => $xgj) {
                    if (in_array("$k", $account_ids)) {

                        foreach ($xgj as $tongji) {
                            $str = substr($tongji->contract, 0, -4);
                            foreach ($product as $p => $plist) {

                                if ($str == $plist) {

                                    if ($pro_arr[$list['id']]["$str"]) {
                                        $amount[$list['id']]["$str"][] = $tongji->amount * $pro_arr[$list['id']][$str];
                                    }
                                }
                            }
                        }

                    }
                }
            }
        }

        return $this->render('view', [
            'model' => $amount[$id],
            'product' => $product,
        ]);

    }

    /**
     * Creates a new AdminTongji model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        if( !in_array($this->role_id, [1,6,7]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $model = new AdminTongji();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing AdminTongji model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        if( !in_array($this->role_id, [1,6,7]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }

        $model = $this->findModel($id);
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing AdminTongji model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        if( !in_array($this->role_id, [1,6,7]) ) {
            return 800;
        }
        $this->findModel($id)->delete();
        return $this->redirect(['index']);
    }

    public function actionDelrecord(array $ids)
    {
        if( !in_array($this->role_id, [1,6,7]) ) {
            return 800;
        }
        if (count($ids) > 0) {
            $c = AdminTongji::deleteAll(['in', 'id', $ids]);
            echo json_encode(array('errno' => 0, 'data' => $c, 'msg' => json_encode($ids)));
        } else {
            echo json_encode(array('errno' => 2, 'msg' => ''));
        }
    }

    public function actionImport()
    {
        set_time_limit(0);
        ini_set('memory_limit', '256M');
        require ROOT . '/excel/PHPExcel.php';
        /*require_once '/aaa/Classes/PHPExcel.php';
        require_once '/aaa/Classes/PHPExcel/IOFactory.php';
        require_once '/aaa/Classes/PHPExcel/Reader/Excel5.php';*/
        // $phpexcel = new \PHPExc
        $request = Yii::$app->request;
        $data = array();
        if ($_POST) {
            if ($_FILES["file"]["error"] > 0) {
                $data = array('error' => '1', 'msg' => '文件上传失败,请重新上传..', 'info' => '');
            }
            $excelFile = '';    //文件名
            $filepath = "uploads/excel";
            $allowtype = array("xls", "csv");
            $arr = explode(".", $_FILES["file"]["name"]);
            $hz = strtolower($arr[count($arr) - 1]);

            if (!is_dir($filepath)) {
                mkdir($filepath, 0777);
                chmod($filepath, 0777);
            }
            $randname = date("Y") . date("m") . date("d") . date("H") . date("i") . date("s") . rand(1000, 9999) . "." . $hz;
            if (is_uploaded_file($_FILES["file"]["tmp_name"])) {      //将临时位置的文件移动到指定的目录上即可
                if (move_uploaded_file($_FILES["file"]["tmp_name"], $filepath . '/' . $randname)) {
                    $excelFile = $filepath . '/' . $randname;       //上传成功的节奏
                    chmod($excelFile, 0777);
                }
            }
            if (!$excelFile) {
                return 0;//文件不存在
                //$data = array('error'=>'2','msg'=>'文件上传失败,请重新上传,检查文件名..','info'=>'');
            } else {      //读取Excel
                // $phpexcel = new \PHPExcel;
                $objReader = ROOT . \PHPExcel_IOFactory::createReader('Excel5');//use excel2007 for 2007 format
                $objPHPExcel = $objReader->load("$excelFile");//$file_url即Excel文件的路径
                $sheet = $objPHPExcel->getSheet(0);//获取第一个工作表
                $highestRow = $sheet->getHighestRow();//取得总行数
                $highestColumn = $sheet->getHighestColumn(); //取得总列数
                $times = time();
                //循环读取excel文件,读取一条,插入一条
                for ($j = 2; $j <= $highestRow; $j++) {//从第一行开始读取数据
                    $str = '';
                    for ($k = 'A'; $k <= $highestColumn; $k++) {            //从A列读取数据
                        //这种方法简单，但有不妥，以'\\'合并为数组，再分割\\为字段值插入到数据库,实测在excel中，如果某单元格的值包含了\\导入的数据会为空
                        $str .= $objPHPExcel->getActiveSheet()->getCell("$k$j")->getValue() . '\\';//读取单元格
                    }

                    //explode:函数把字符串分割为数组。
                    $strs = explode("\\", $str);
                    $memModel = new AdminTongji();
                    if (!empty($str[0])) {

                        $memModel->xgj_id = $strs[0];
                        $memModel->group = $strs[1];
                        $memModel->jy_time = strtotime($strs[2]);
                        $memModel->entrust = $strs[3];
                        $memModel->deal_num = $strs[4];
                        $memModel->request_num = $strs[5];
                        $memModel->bourse = $strs[6];
                        $memModel->contract = $strs[7];
                        $memModel->transaction = $strs[8];
                        $memModel->kaiping = $strs[9];
                        $memModel->insure = $strs[10];
                        $memModel->valence = $strs[11];
                        $memModel->amount = $strs[12];
                        $memModel->amount_price = $strs[13];
                        $memModel->sj_time = strtotime($strs[14]);
                        $memModel->cj_time = strtotime($strs[15]);
                        $memModel->account = $strs[16];
                        $memModel->xitong_num = $strs[17];
                        $memModel->charge = $strs[18];
                        $memModel->yingkui = $strs[19];
                        $memModel->pc_yingkui = $strs[20];
                        $memModel->jc_charge = $strs[21];
                        $memModel->currency = $strs[22];

                        $memModel->save(false);
                    }


                }

                //$AdminHousekeeperr= new AdminHousekeeper;
                //Yii::$app->db->createCommand()->batchInsert('AdminHousekeeperr', ['xgj_name', 'xgj_pwd'], [$info])->execute();
                //return $info;
                //print_r($info);exit;
            }
        }
        return $this->redirect(['index']);
    }

    /**
     * Finds the AdminTongji model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return AdminTongji the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AdminTongji::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
