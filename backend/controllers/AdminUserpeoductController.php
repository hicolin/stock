<?php

namespace backend\controllers;

use backend\models\AdminCommission;
use backend\models\AdminMember;
use backend\models\AdminRegions;
use backend\models\AdminUser;
use common\models\Common;
use common\utils\CommonFun;

use Yii;
use backend\models\AdminUserpeoduct;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\data\Pagination;
use backend\models\AdminUserRole;
use backend\models\AdminProduct;
use backend\models\AdminTongji;
use backend\models\AdminCommissionCharge;

/**
 * AdminUserpeoductController implements the CRUD actions for AdminUserpeoduct model.
 */
class AdminUserpeoductController extends Controller
{
    /**
     * @inheritdoc
     */
    public $layout = "lte_main";
    public $admin_id;
    public $role_id;
    public $admin_user;
    public $invitation;
    static public $str = '';
    public $code = [];
    public $i=0;
    public $rank = 1;
    public $user_id = [];

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->admin_id = yii::$app->session['__id'];
        //根据管理员id判断管理员的角色，超级管理员role_id为1
        $this->role_id = AdminUserRole::findOne(['user_id'=>yii::$app->session['__id']])->role_id;
        $this->admin_user = AdminUser::findOne(['id'=>yii::$app->session['__id']]);
        $this->invitation = Yii::$app->user->identity->vatation_code;
    }

    /**
     * Lists all AdminUserpeoduct models.
     * @return mixed
     */
    public function actionIndex()
    {
        $this->code = [];
        //$query = AdminUser::find()->joinWith('daili')->joinWith('info')->andWhere(['>','role_id',$this->role_id-1]);
        $query = AdminUser::find()->joinWith('daili')->joinWith('info')->andWhere(['role_id'=>2]);
        if( !in_array($this->role_id, [1,2,3]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }else if($this->role_id==2){
            $model = AdminUser::find()->where(['in','vatation_code2',$this->invitation])->all();
            //print_r($model);exit;
            if($model){
                $this->getAgent($model);
            }
            $this->code[] = $this->invitation;
            $query = $query->andWhere(['in','vatation_code2',$this->code]);
        }else {
            $query =$query->orderBy('status asc');
        }
        $querys = Yii::$app->request->get('query');
        if (count($querys) > 0) {
            $uname = $querys['uname'];
            $state = $querys['state'];
            if ($uname) {
                //echo $uname;
                $query = $query->andWhere(['like', 'admin_user.uname', $uname]);
            }
            if($state != 'tt') {
                //echo $state;
                $query = $query->andWhere(['admin_user_peoduct.state'=>$state]);
            }else{
                $querys['state'] = 'tt';
            }
        }else{
            $querys['state'] = 'tt';
        }
        $querys['pAgent'] ? $pAgent=$querys['pAgent'] : $pAgent=Yii::$app->user->identity->id;

        $ids=AdminUser::getAllSonAgent($pAgent,0);
        array_push($ids, $pAgent);//登录用户自身id加进去
        //array_push($ids, $this->admin_id);//登录用户自身id加进去

        if (isset($ids) && $ids != null) {
            $query = $query->andWhere(['in', 'admin_user.id', $ids]);
        }
        $user=new AdminUser();

        $sonAgent=$user->getOptions3(Yii::$app->user->identity->id);
//        $pids = array();
//        foreach($sonAgent as $v=>$key){
//            $pids[] = $v;
//        }
//        if(isset($pids) && $pids!=null){
//            $query = $query->andWhere(['in','pid',$pids]);
//        }
            //echo '<pre>';
            //print_r($pids);

        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $count_query = $query;
        $data['num'] = $count_query->count();
        $data['money'] = $this->isNextAgent($this->admin_id)?$count_query->sum('commission_member'):0;//返佣合计,只统计直客的
        $agent_model = AdminUserpeoduct::find()->where(['uid'=>$this->admin_id])->one();
        if($agent_model) {
            $commisssion_agent = $agent_model->commission_agent;
        }else{
            $commisssion_agent = 0;
        }
        //$data['money_agent'] = $count_query->sum('commission_agent')+$commisssion_agent;//截佣合计
        $data['money_agent'] = $count_query->sum('commission_agent');//截佣合计
        if(!$this->isNextAgent($this->admin_id)) {
            $data['money_agent'] = 0;
        }
        if($agent_model) {
            $data['money_member'] = $agent_model->commission_member;//截佣合计
        }
        $products = $query->offset($pagination->offset)->orderBy('id asc')
            ->limit($pagination->limit)
            ->all();
        // var_dump($sonAgent);
        //$today = time('Y-m-d');
        //当天时间段
        //echo $query ->createCommand()->getRawSql();exit;
        //$this->getAgentRelationship($this->admin_user->vatation_code2);
        $agenr_arr = AdminUserpeoduct::find()->where(['uid'=>$this->admin_id])->one();
//       echo '<pre>';
     // print_r($agenr_arr);exit;
        return $this->render('index', [
            'data' => $data,
            'model' => $products,
            'pages' => $pagination,
            'role_id' => $this->role_id,
            'query' => $querys,
            'admin_id' => $this->admin_id,
            'admin_user' => $agenr_arr,
            'sonAgent' => $sonAgent,
        ]);
    }

    /*
     * 返回代理下面代理的邀请码
     * 代理的代理。。。
     * $model
     * */
    protected function getAgent($model)
    {
        $this->i++;
        //获取其下面的代理
        //$admin_user = AdminUser::find()->where(['vatation_code2'=>$vatation_code])->all();
        $arr = [];
        foreach ($model as $key=> $list) {
            if($list->vatation_code) {
                //返回下面的代理的邀请码
                $this->code[] = $list->vatation_code;
                $arr[] = $list->vatation_code;
            }
        }
        $next_model = AdminUser::find()->where(['in','vatation_code2',$arr])->all();
        //如果存在下级代理
        if($next_model){
            $this->getAgent($next_model);
        }
        return $this->code;
    }

    /**
     * Displays a single AdminUserpeoduct model.
     * @param string $id
     * @return mixed
     */
    public function actionView($id)
    {
        $model = AdminUser::find()->joinWith('daili')->joinWith('info')->andWhere(['role_id'=>2])->andWhere(['admin_user.id'=>$id])->one();
        if($model->info['bank_province'] && $model->info['bank_city']) {
            $bank_address = AdminRegions::findOne(['id'=>$model->info['bank_province']])->name.AdminRegions::findOne(['id'=>$model->info['bank_city']])->name.$model->info['bank_address'];
        }else {
            $bank_address = '';
        }
        //如果是代理商查看不是自己的代理商
        $next_model = AdminUser::find()->where(['in','vatation_code2',$this->invitation])->all();
        if($next_model){
            $this->getAgent($next_model);
        }
        $this->code[] = $this->invitation;
        if($this->role_id==2 && !in_array($model->vatation_code2,$this->code)){
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $rate = json_decode($model->info['rate'],true);
        //print_r($model);exit;
        return $this->render('view', [
            'model' => $model,
            'rate' => $rate,
            'bank_address' => $bank_address,
        ]);

    }

    public function actionValidateUname()
    {
        $admin_user = new AdminUser();
        $res = AdminUser::find()->where(['uname'=>Yii::$app->request->post('uname')])->all();
        // var_dump($res);
        if($res){
            echo 300;exit;
        }else{
            echo 100;exit;
        }


    }

    /**
     * Creates a new AdminUserpeoduct model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        if( !in_array($this->role_id, [1,2,3]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        $model = new AdminUserpeoduct();
        $admin_user = new AdminUser();
        $post=Yii::$app->request->post();
        if (Yii::$app->request->post()) {
            $uname=$post['AdminUserpeoduct']['uname'];
            $id_card=$post['AdminUserpeoduct']['id_card'];
            $bank_name=$post['AdminUserpeoduct']['bank_name'];
            $bank_code=$post['AdminUserpeoduct']['bank_code'];
            $bank_province=$post['AdminUserpeoduct']['bank_province'];
            $bank_city=$post['AdminUserpeoduct']['bank_city'];
            $bank_address=$post['AdminUserpeoduct']['bank_address'];
            $license=$post['AdminUserpeoduct']['license'];
            $password=Yii::$app->request->post('password');
            $vatation_code=Yii::$app->request->post('vatation_code');
            $uploadfile=Yii::$app->request->post('uploadfile');
            if(in_array($this->role_id, [1,2,3])) {
                    // echo $uname;
                    $admin_user->uname = $uname;
                    $admin_user->password = Yii::$app->security->generatePasswordHash(Yii::$app->request->post('password'));
                    $admin_user->last_ip= CommonFun::getClientIp();
                    $admin_user->status = 10;
                    $admin_user->create_user = $this->admin_user->uname;
                    $admin_user->update_user = $this->admin_user->uname;
                    $admin_user->create_date = date('Y-m-d H:i:s',time());
                    $admin_user->update_date = date('Y-m-d H:i:s',time());
                    $admin_user->vatation_code = Common::getCode();
                    $admin_user->vatation_code2 = $vatation_code;
                    $admin_user->pid = Yii::$app->user->identity->id;
                    if($admin_user->save()) {
                     $model = new AdminUserpeoduct();
                     $model->uname = $uname;
                     $model->pwd = $password;
                     $model->uid = $admin_user->id;
                     $model->id_card = $id_card;
                     $model->bank_name = $bank_name;
                     $model->bank_code = $bank_code;
                     $model->bank_province = 1;
                     $model->bank_city = $bank_city;
                     $model->bank_address = $bank_address;
                     $model->license = $license;
                          $admin_role = new AdminUserRole();
                          $admin_role->user_id = $admin_user->id;
                          $admin_role->role_id = 2;
                          $admin_role->create_user = $this->admin_user->uname;
                          $admin_role->update_user = $this->admin_user->uname;
                          $admin_role->create_date = date('Y-m-d H:i:s',time());
                          $admin_role->update_date = date('Y-m-d H:i:s',time());
                          if($model->save() && $admin_role->save() ) {
                              return $this->redirect(['index', 'id' => $model->id]);
                          } else {
                              return $this->render('create', [
                                  'model' => $model,
                                  'invitation' => $this->invitation,
                                  'role_id' => $this->role_id,
                              ]);
                           }

          }else{
            var_dump($admin_user->errors);
          }
        }else {
            $province = AdminRegions::getProvince();
            $city = AdminRegions::getRegion(1);
            return $this->render('create', [
                'model' => $model,
                // 'product' => $product,
                'invitation' => $this->invitation,
                'role_id' => $this->role_id,
            ]);
        }



}else {
            $province = AdminRegions::getProvince();
            $city = AdminRegions::getRegion(1);
            return $this->render('create', [
                'model' => $model,
                // 'product' => $product,
                'invitation' => $this->invitation,
                'role_id' => $this->role_id,
                'province'=>$province,
                'city'=>$city,
            ]);
        }
}











    /**
     * Updates an existing AdminUserpeoduct model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        // echo $id;exit;
        if( !in_array($this->role_id, [1,2,5,6,7]) ) {
            yii::$app->getSession()->setFlash('error', '没有该权限');
            echo "<script>window.history.go(-1)</script>";exit;
        }
        //user_peoduct表中
        $model = $this->findModel($id);
        $rate = json_decode($model->rate,true);
        $uname1 = $this->findModel($id)->uname;

        //user_role表中
        $user_role = AdminUserRole::find()->where(['user_id'=>$model->uid])->one();

        //user表中
        $info = AdminUser::findOne(['id'=>$model->uid]);
        // var_dump($this->role_id);exit;
        // var_dump($model->info['id']);exit;
        if(($this->role_id == 2)) {
            if($info->status === 0 || $info->status==1) {
                $next_model = AdminUser::find()->where(['in','vatation_code2',$this->invitation])->all();
                if($next_model){
                    $this->getAgent($next_model);
                }
                $this->code[] = $this->invitation;

                //如果是代理商查看不是自己的代理商
                if($this->role_id==2 && !in_array($info->vatation_code2,$this->code)){
                    yii::$app->getSession()->setFlash('error', '没有该权限');
                    echo "<script>window.history.go(-1)</script>";exit;
                }
            }else{
                yii::$app->getSession()->setFlash('error', '没有该权限');
                echo "<script>window.history.go(-1)</script>";exit;
            }
        }

        if($model->proid){
            $pid_price = array();
            $proid=explode(",", $model->proid);
            $price=explode(",", $model->price);
            for ($i=0; $i < count($proid); $i++) {
                $pid_price[$proid[$i]]=$price[$i];
            }
        }
        else{
            $pid_price = array();
            $proid = array();
        }
        if ($model->load(Yii::$app->request->post())) {
            // var_dump(Yii::$app->request->post());exit;
            $uname2 = $model->uname;
            $pass = Yii::$app->request->post('password');
            if($pass){
                $info->password = Yii::$app->security->generatePasswordHash($pass);
                $model->pwd = $pass;
            }
            if($uname1 != $uname2) {
                $info->uname = $uname2;
            }
            $info->update_user = Yii::$app->user->identity->uname;
            $info->update_date = date('Y-m-d H:i:s');
            // $info->vatation_code = Yii::$app->request->post('vatation_code');
            $info->vatation_code2 = Yii::$app->request->post('vatation_code2');
            // var_dump($info->vatation_code2);exit;
            if($this->role_id == 2) {
                //代理商修改后，状态改为0
                $info->status = 0;
            }
            if(!$info->save()) {
                return $this->render('update', [
                    'model' => $model,
                    'invitation' => $this->invitation,
                    'pid_price' => $pid_price,
                    'proid' => $proid,
                    'info' => $info,
                ]);
            }
            $model->other_file = ltrim(Yii::$app->request->post('other_file'),',');
            $model->other_file = rtrim(Yii::$app->request->post('other_file'),',');
            //汇率信息
            $rate_arr['eur_usd'] = yii::$app->request->post('eur_usd');
            $rate_arr['usd_hkd'] = yii::$app->request->post('usd_hkd');
            $rate_arr['usd_rmb'] = yii::$app->request->post('usd_rmb');
            $model->rate = json_encode($rate_arr);

            $proid = Yii::$app->request->post("proid");
            $price = Yii::$app->request->post("price");
            // $price = array_filter($price);
            if($proid){
                $model->proid=trim(implode(",",$proid),",");
                $model->price=trim(implode(",",$price),",");
            }
            if($model->validate() == true && $model->save()){
                return $this->redirect(['index', 'id' => $model->id]);
            }
        } else {
            // var_dump($model['bank_province']);exit;
            $province = AdminRegions::getProvince();
            $city = AdminRegions::getRegion(1);
            return $this->render('create', [
                'model' => $model,
                'rate' => $rate,
                'invitation' => $info['vatation_code2'],
                'product' => $product,
                'pid_price' => $pid_price,
                'proid' => $proid,
                'info' => $info,
                'province'=>$province,
                'city'=>$city
            ]);
        }
    }

    /**
     * Deletes an existing AdminUserpeoduct model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        if( !in_array($this->role_id, [1,5,6,7]) ) {
            return 800;
        }
        //print_r($id);exit;
        //$this->findModel($id)->delete();
        AdminUser::findOne($id)->delete();
        if(AdminUserPeoduct::findOne(['uid'=>$id])) {
            AdminUserPeoduct::findOne(['uid'=>$id])->delete();
        }

        return $this->redirect(['index']);
    }

    public function actionDelrecord(array $ids)
    {
        if( !in_array($this->role_id, [1,5,6,7]) ) {
            return 800;
        }
        if (count($ids) > 0) {
            $c = AdminUser::deleteAll(['in', 'id', $ids]);
            if(AdminUserPeoduct::findAll(['in', 'uid', $ids])) {
                AdminUserPeoduct::deleteAll(['in', 'uid', $ids]);
            }
           // AdminUser::deleteAll(['in', 'uid', $ids]);
            echo json_encode(array('errno' => 0, 'data' => $c, 'msg' => json_encode($ids)));
        } else {
            echo json_encode(array('errno' => 2, 'msg' => ''));
        }
    }
    public function actionCj($id)
    {
        if( !in_array($this->role_id, [1,5,6,7]) ) {
            return 800;
        }
        //$this->findModel($id)->delete();
        $user = AdminUser::findOne($id);
        $model = AdminUser::find()->where(['pid'=>$user->id])->all();
        $member = AdminMember::find()->where(['pid'=>$user->id])->all();
        if($model){
            $arr = array();
            foreach($model as $list){
                $arr[] = $list->id;
            }
            AdminUser::updateAll(['pid'=>$user->pid,'vatation_code2'=>$user->vatation_code2],['in','id',$arr]);
        }
        if($member){
            $arr2 = array();
            foreach($member as $list2){
                $arr2[] = $list2->id;
            }
            AdminMember::updateAll(['pid'=>$user->pid,'vatation_code2'=>$user->vatation_code2],['in','id',$arr2]);
        }
        //AdminMember::updateAll(['pid'=>$user->pid,'vatation_code2'=>$user->vatation_code2],['pid'=>$user->id]);
        AdminUser::findOne($id)->delete();
        if(AdminUserPeoduct::findOne(['uid'=>$id])) {
            AdminUserPeoduct::findOne(['uid'=>$id])->delete();
        }
        echo 600;exit;
        //return $this->redirect(['index']);
    }

    /**
     * Finds the AdminUserpeoduct model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return AdminUserpeoduct the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AdminUserpeoduct::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
    /*
     *列表循环获取代理关系
     * */
    public static function getInfo($pid)
    {
        if($pid==0) {
            return '啧啧啧';
        }
        self::$str = '';
        return self::getAgentRelationship($pid);
    }

    /*
     * 根据代理被邀请码返回代理关系
     * */
    public static function getAgentRelationship($pid)
    {
        if($pid==0) {
            return Common::getSysInfo(5);
        }
        $admin_user = AdminUser::find()->joinWith('daili')->where(['admin_user.id'=>$pid])->asArray()->one();
//        echo '<pre>';
//        print_r($admin_user);exit;
        if($admin_user['daili']['role_id'] != 1) {
            $arr[] = $admin_user['uname'];
            self::$str = '->'.$admin_user['uname'].self::$str;
            self::getAgentRelationship($admin_user['pid']);
        }
        return  Common::getSysInfo(5).self::$str;
    }
    /*
     * 审核
     * */
    public function actionChange()
    {
        if( !in_array($this->role_id, [1,5,6,7]) ) {
            return 800;
        }
        $id = yii::$app->request->get('id');
        $state = yii::$app->request->get('state');
        $pwd = yii::$app->request->get('pwd');
        $admin_user = AdminUser::findOne(['id'=>$id]);
        $user_peoduct = AdminUserpeoduct::findOne(['uid'=>$id]);
        if($pwd==0) {
            $admin_user->status=$state;
        } else {
            $admin_user->status=$state;
            $admin_user->password=Yii::$app->security->generatePasswordHash($pwd);
            $admin_user->vatation_code=Common::getCode();
            $user_peoduct->pwd = $pwd;
        }
        $transaction = Yii::$app->db->beginTransaction();
        if ($admin_user->validate() && $user_peoduct->validate()) {
            try {
                $admin_user->save();
                $user_peoduct->save();
                $transaction->commit();
                return 100;exit;
            } catch (Exception $e) {
                //捕获错误
                $transaction->rollback();
            }
        }else{
            return 200;exit;
        }
    }
    /**
     * 返佣比例
     * @return string
     */
    public function actionRate(){
        $rate = Yii::$app->request->post('rate');
        $id = Yii::$app->request->post('id');
        $key = Yii::$app->request->post('key');
        $user = AdminUser::findOne($id);
        $user_p = AdminUser::findOne($user->pid);
        if($user_p->pid>0){
            if($rate>$user_p->$key){
                return 300;
            }else{
                $user->$key = $rate;
                $user->save();
                return 600;
            }
        }else{
            $user->$key = $rate;
            $user->save();
            return 600;
        }
    }

    /*
     * 生成邀请码
     * */
    public function actionCodes() {
        //$id = $_REQUEST['id'];
        $code = substr(md5(uniqid(rand(),1)),0,16);
        $query = AdminUser::find()->andWhere(['vatation_code'=>$code]);
        //如果邀请码存在，重新再生成
        $res = $query->asArray()->one();
        if($res) {
            $this->actionCodes();
        }
        return $code;
        //echo json_encode($code);exit;
    }

    /*
     * 返佣明细
    * */
    public function actionDetail2($id='')
    {
        $this->i = 0;
        $this->code = [];
        $arr_xgj = [];
        if($id) {
            $admin_user = AdminUser::findOne(['id'=>$id]);
            //查找代理下面的会员
            $model = AdminUser::find()->where(['pid'=>$id])->all();
            if($model){
                $this->getAgentMembers($model);
            }
            $this->code[] = $admin_user->vatation_code;
            $member = AdminMember::find()->where(['in','vatation_code2',$this->code])->all();
            foreach ($member as $key=> $list) {
                $arr_xgj[] = $list->xgj_name;
            }
        }else{
            //查看代理的直系返佣明细
            $model = AdminUser::findOne($this->admin_id);
            $member = AdminMember::find()->where(['vatation_code2'=>$model->vatation_code])->all();
            foreach ($member as $list) {
                $arr_xgj[] = $list->xgj_name;
            }
        }

        $query = AdminTongji::find()->joinWith('member')->andWhere(['in','xgj_id',$arr_xgj]);
        $querys = Yii::$app->request->get('query');
        if (count($querys) > 0) {
            //开始时间：05:59
            //结算时间：06:00
            $b_time = $querys['b_time'];
            $e_time = $querys['e_time'];
            //$b_time += 5*60*60+59*60;
            //$e_time += 6*60*60;
            $name = $querys['name'];
            $xgj_name = $querys['xgj_name'];
            if ($b_time) {
                $query = $query->andWhere(['>=', 'jy_time', $b_time]);
            }
            if ($e_time) {
                $query = $query->andWhere(['<=', 'jy_time', $e_time]);
            }
            if($name){
                $query = $query->andWhere(['like','realname',$name]);
            }
            if($xgj_name){
                $query = $query->andWhere(['like','xgj_id',$xgj_name]);
            }
        }
        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $detailes = $query->offset($pagination->offset)->orderBy("jy_time desc")
            ->limit($pagination->limit)
            ->all();
        return $this->render('detail', [
            'model' => $detailes,
            'member' => $member,
            'pages' => $pagination,
            'query' => $querys,
            'role_id' => $this->role_id,
        ]);
    }
    public function actionDetail($id='')
    {
        $this->i = 0;
        $this->code = [];
        $arr_xgj = [];
        if($id==156){
            $query = AdminTongji::find()->joinWith('member');
        }else{
            $query = AdminTongji::find()->joinWith('member')->andWhere(['uid'=>$id]);
        }

        $querys = Yii::$app->request->get('query');
        if (count($querys) > 0) {
            //开始时间：05:59
            //结算时间：06:00
            $b_time = $querys['b_time'];
            $e_time = $querys['e_time'];
            //$b_time += 5*60*60+59*60;
            //$e_time += 6*60*60;
            $name = $querys['name'];
            $xgj_name = $querys['xgj_name'];
            if ($b_time) {
                $query = $query->andWhere(['>=', 'jy_time', $b_time]);
            }
            if ($e_time) {
                $query = $query->andWhere(['<=', 'jy_time', $e_time]);
            }
            if($name){
                $query = $query->andWhere(['like','realname',$name]);
            }
            if($xgj_name){
                $query = $query->andWhere(['like','xgj_id',$xgj_name]);
            }
        }
        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $detailes = $query->offset($pagination->offset)->orderBy("jy_time desc")
            ->limit($pagination->limit)
            ->all();
        return $this->render('detail', [
            'model' => $detailes,
            'member' => $member,
            'pages' => $pagination,
            'uid'=>$this->admin_id,
            'query' => $querys,
            'role_id' => $this->role_id,
        ]);
    }

    /*
     * 获得其代理及代理的代理。。
     * 邀请码集合
     * */
    protected function getAgentMembers($model)
    {
        //获取其下面的代理
        //$admin_user = AdminUser::find()->where(['vatation_code2'=>$vatation_code])->all();
        //$this->i++;
        $arr = [];
        foreach ($model as $key=> $list) {
            if($list->vatation_code) {
                //返回下面的代理的邀请码
                $this->code[] = $list->vatation_code;
                $arr[] = $list->vatation_code;
            }
        }
        $next_model = AdminUser::find()->where(['in','vatation_code2',$arr])->all();
        //如果存在下级代理
        if($next_model){
            $this->getAgentMembers($next_model);
        }
        return $this->code;
    }

    /*
     * 返回代理下面的会员
     * */
    protected function getAgentMember($vatation_code)
    {
        //获取其下面的代理
        $admin_user = AdminUser::find()->where(['vatation_code2'=>$vatation_code])->all();
        $arr_code = [];
        if($admin_user) {
            foreach ($admin_user as $key=> $list) {
                if($list->vatation_code) {
                    $arr_code[] = $list->vatation_code;
                }
            }
            $admin_member = AdminMember::find()->where(['in','vatation_code2',$arr_code])->all();
            if($admin_member) {
                return $admin_member;
            }else{
                return '';
            }
        }else{
            return '';
        }
    }

    /*
     * 该代理的下面代理全部提交返佣申请，该代理才能提交返佣申请
     * 判断该代理是否能达到提现的要求
     * $id 代理商的会员id,AdminUser
     * */
    public static function dealCommission($id)
    {
        $admin_user = AdminUser::findOne($id);
        //查该代理下面的代理
        $next_user = AdminUser::find()->where(['vatation_code2'=>$admin_user->vatation_code])->all();
        if($next_user) {
            //如果该代理已经提交了
        }else {
            //已经是最后一级代理，达到要求
            return 1;
        }

    }

    /*
     * 提交申请
     * */
    public function actionSubCommission()
    {
        $id = yii::$app->request->get('id');
        $admin_info = AdminUserpeoduct::findOne($id);
        $admin_id = $admin_info->uid;
        $admin_user = AdminUser::findOne($admin_id);
        if($admin_info) {
            //判断其下级是否全部提交
            $is_sub = $this->isAgentSub($admin_id);
            if(!$is_sub) {
                return 200;
            }
            $this->rank = 1;
            //计算该代理的等级
            $this->getAgentRank($admin_user->vatation_code2);

            $this->code = [];
            $per_model = AdminUserpeoduct::findOne(['uid'=>$this->admin_id]);
            if($per_model->state) {
                //已经提交
                return 400;
            }
           /* if($per_model->commission_amount<=0 && $per_model->commission_member<=0) {
                return 400;
            }*/

            //查找直属下级
            $count = AdminUser::find()->joinWith('info')->where(['vatation_code2'=>$admin_user->vatation_code]);
            $money = floatval($count->sum('commission_pre')) + floatval($per_model->commission_amount);
            if(floatval($money) <= 0) {
                //佣金余额为0
                return 300;
            }else {
                //生成记录
                $commission = new AdminCommissionCharge();
                $commission->uid = $admin_id;
                $commission->money = $money;
                $commission->create_time = time();
                $commission->state = 0;

                //清空代理的金额
                $per_model->commission_pre =  $per_model->commission_amount;
                $per_model->commission_amount = 0;
                $per_model->commission_agent = 0;
                $per_model->commission_member = 0;
                $per_model->state = 1;

                $transaction = Yii::$app->db->beginTransaction();
                if ($commission->validate() && $per_model->validate()) {
                    try {
                        $commission->save();
                        $per_model->save();
                        //提交
                        $transaction->commit();
                        if($this->rank == 1) {
                            $this->clearAgent($admin_id);
                        }
                        return 100;exit;
                    } catch (Exception $e) {
                        //捕获错误
                        $transaction->rollback();
                    }
                }else{
                    return 400;exit;
                }
            }
        }else {
            return 300;
        }

    }


    /*
   * $url 链接地址
   * $size 二维码大小
   * $margin 外边距
   * 生成二维码
   * */
    public function actionQrcode($vatation_code='',$size=4, $margin=1)
    {
        //$url = $url?:Yii::$app->urlManager->createAbsoluteUrl(['user/register','vatation_code'=>$this->admin_user->vatation_code]);
        $url = "http://www.xinniuniu.cn/index/register?vatation_code2=".$vatation_code;
        //echo $url;exit;
        //引入二维码生成类
        require ROOT.'/phpqrcode/qrlib.php';
        //设置 header 头,直接输出图片
        Yii::$app->response->headers->set('Content-Type', 'image/png');
        //根据参数生成二维码 , 将其第二个参数值设为 false ,也就是不输出图片文件
        \QRcode::png($url, false, "L", $size, $margin);
        die();
    }

    /*
     * 统计返佣金额
     * */
    public function actionCountCommission()
    {
        $ids = yii::$app->request->get('ids');
        if (count($ids) > 0) {
            $data['money'] = AdminUserpeoduct::find()->where(['in','uid',$ids])->sum('commission_member');
            $data['money_agent'] = AdminUserpeoduct::find()->where(['in','uid',$ids])->sum('commission_agent');
            $data['money_count'] = $data['money']+$data['money_agent'];
            return json_encode($data);
        }
    }

    /*
     * 根据代理id判断其下级有佣金是否全部提交返佣
     * 返回 true 表示已全部提交
     * */
    public function isAgentSub($uid)
    {
        $model = AdminUser::findOne($uid);
        $next_model = AdminUser::find()->joinWith('info')->where(['vatation_code2'=>$model->vatation_code])->all();
        if($next_model) {
            foreach ($next_model as $list) {
                if($list->info['state']) {
                    continue;
                }else if($list->info['commission_amount']>0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     *代理提交返佣
     */
    public function actionAgentSub()
    {
        //判断其下级是否全部提交
        $is_sub = $this->isAgentSub($this->admin_id);
        if(!$is_sub) {
            return 200;
        }
        $this->rank = 1;
        //计算该代理的等级
        $this->getAgentRank($this->admin_user->vatation_code2);
        $this->code = [];
        $per_model = AdminUserpeoduct::findOne(['uid'=>$this->admin_id]);

        if($per_model->state) {
            //已经提交
            return 400;
        }
       /* if($per_model->commission_amount<=0 && $per_model->commission_member<=0) {
            return 400;
        }*/
       //返回自己的代理id集合
        $this->user_id = [];
        $agent_me = AdminUser::findOne($this->admin_id);
        $model_me = AdminUser::find()->where(['vatation_code2'=>$agent_me->vatation_code])->all();
        $agent_id = $this->getAgentId($model_me);
        //查找直属下级（修改成查看所有的下级代理）
        //$count = AdminUser::find()->joinWith('info')->where(['vatation_code2'=>$this->invitation]);
        $count = AdminUser::find()->joinWith('info')->where(['in','admin_user.id',$agent_id]);
        //将直属下级的截佣金额清空
        AdminUserpeoduct::updateAll(['commission_agent'=>0],['in','uid',$agent_id]);

        $money = floatval($count->sum('commission_pre')) + floatval($per_model->commission_amount);
        if(floatval($money) <= 0) {
            //佣金余额为0
            return 300;
        }else {
            //生成记录
            $commission = new AdminCommissionCharge();
            $commission->uid = $this->admin_id;
            $commission->money = $money;
            $commission->create_time = time();
            $commission->state = 0;

            //清空代理的金额
            $per_model->commission_pre +=  $per_model->commission_amount;
            $per_model->commission_amount = 0;
            $per_model->commission_agent = 0;
            $per_model->commission_member = 0;
            $per_model->state = 1;

            $transaction = Yii::$app->db->beginTransaction();
            if ($commission->validate() && $per_model->validate()) {
                try {
                    $commission->save();
                    $per_model->save();
                    //提交
                    $transaction->commit();
                    if($this->rank == 1) {
                        $this->clearAgent($this->admin_id);
                    }
                    return 100;exit;
                } catch (Exception $e) {
                    //捕获错误
                    $transaction->rollback();
                }
            }else{
                return 400;exit;
            }
        }

    }

    /**
     * 根据管理员被邀请码返回其代理级别
     * $invatation  被邀请码
     */
    public function getAgentRank($invatation)
    {
        if($this->role_id == 2) {
            $model = AdminUser::find()->joinWith('info')->joinWith('daili')
                ->andWhere(['admin_user_role.role_id'=>2])
                ->andWhere(['vatation_code'=>$invatation])->one();

            if($model) {
                //如果存在上级
                $this->rank++;
                if($model->vatation_code2) {
                    $this->getAgentRank($model->vatation_code2);
                }
            }
            return $this->rank;
        }else{
            $this->rank = 0;
        }
        return $this->rank;
    }

    /**
     * 一级代理提交返佣时
     * 将这条代理线的所有提交统计金额清空
     * */
    protected function clearAgent($uid)
    {
        //自己的邀请码
        $agent = AdminUser::findOne($uid);
        $model = AdminUser::find()->where(['vatation_code2'=>$agent->vatation_code])->all();
        $agent_id = $this->getAgentId($model);
        $agent_id[] = $this->admin_id;
        AdminUserpeoduct::updateAll(['commission_pre'=>0],['in','uid',$agent_id]);
        AdminUserpeoduct::updateAll(['commission_agent'=>0],['in','uid',$agent_id]);
    }

    /*
    * 获得其代理及代理的代理。。
    * id集合
    * */
    protected function getAgentId($model)
    {
        //$model = AdminUser::find()->where(['vatation_code2'=>$vatation_code])->all();
        $arr = [];
        if($model) {
            foreach ($model as $key=> $list) {
                if($list->vatation_code) {
                    //返回下面的代理的邀请码
                    $this->user_id[] = $list->id;
                    $arr[] = $list->vatation_code;
                }
            }
        }

        $next_model = AdminUser::find()->where(['in','vatation_code2',$arr])->all();
        //如果存在下级代理

        if($next_model){
            $this->getAgentId($next_model);
        }
        return $this->user_id;
    }

    /**
     * 判断有没有下级代理
     * @return boolean
     */
    protected function isNextAgent($id)
    {
        $model = AdminUser::findOne($id);
        if(!$model) {
            return false;
        }else {
            $next_model = AdminUser::find()->where(['vatation_code2'=>$model->vatation_code])->one();
            if($next_model) {
                return true;
            }else {
                return false;
            }
        }
    }
    public function actionCcName()
    {
        $uname = Yii::$app->request->post('uname');
        $user = AdminUserpeoduct::findOne(['uname'=>$uname]);
        if($user){
            return 200;
        }else{
            return 600;
        }
    }

    /**
     * 对应人的返佣列表
     * @return string
     */
    public function actionCommissionList($id)
    {
        $query = AdminCommission::find()->andWhere(['uid'=>$id]);
        $static = AdminCommission::find()->andWhere(['uid'=>$id]);
        $querys = Yii::$app->request->get('query');
        $query = $this->condition($querys,$query);
        $static = $this->condition($querys,$static);
        $money = $static->select('sum(money) as money')->asArray()->one();
        $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => '10',
                'pageParam' => 'page',
                'pageSizeParam' => 'per-page']
        );
        $detailes = $query->offset($pagination->offset)->orderBy("id desc")
            ->limit($pagination->limit)
            ->all();
        return $this->render('commission-list', [
            'model' => $detailes,
            'pages' => $pagination,
            'uid'=>$this->admin_id,
            'query' => $querys,
            'role_id' => $this->role_id,
            'money' => $money,
        ]);
    }

    public function condition($querys,$query){
        if (count($querys) > 0) {
            $b_time = $querys['b_time'];
            $e_time = $querys['e_time'];
            if ($b_time) {
                $query = $query->andWhere(['>=', 'create_time', strtotime($b_time)]);
            }
            if ($e_time) {
                $query = $query->andWhere(['<=', 'create_time', strtotime($e_time)]);
            }
            if($querys['state']>0){
                $query = $query->andWhere(['type'=>$querys['state']]);
            }
            if($querys['name']){
                $uid = AdminUser::findOne(['uname'=>$querys['name']])->id;
                $query = $query->andWhere(['uid'=>$uid]);
            }
        }
        return $query;
    }
}
